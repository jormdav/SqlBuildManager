//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SQLSync {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class SqlSyncBuildData : DataSet {
        
        private SqlSyncBuildProjectDataTable tableSqlSyncBuildProject;
        
        private ScriptsDataTable tableScripts;
        
        private ScriptDataTable tableScript;
        
        private BuildsDataTable tableBuilds;
        
        private BuildDataTable tableBuild;
        
        private ScriptRunDataTable tableScriptRun;
        
        private DataRelation relationScripts_Script;
        
        private DataRelation relationBuild_ScriptRun;
        
        private DataRelation relationBuilds_Build;
        
        private DataRelation relationSqlSyncBuildProject_Scripts;
        
        private DataRelation relationSqlSyncBuildProject_Builds;
        
        public SqlSyncBuildData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected SqlSyncBuildData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SqlSyncBuildProject"] != null)) {
                    this.Tables.Add(new SqlSyncBuildProjectDataTable(ds.Tables["SqlSyncBuildProject"]));
                }
                if ((ds.Tables["Scripts"] != null)) {
                    this.Tables.Add(new ScriptsDataTable(ds.Tables["Scripts"]));
                }
                if ((ds.Tables["Script"] != null)) {
                    this.Tables.Add(new ScriptDataTable(ds.Tables["Script"]));
                }
                if ((ds.Tables["Builds"] != null)) {
                    this.Tables.Add(new BuildsDataTable(ds.Tables["Builds"]));
                }
                if ((ds.Tables["Build"] != null)) {
                    this.Tables.Add(new BuildDataTable(ds.Tables["Build"]));
                }
                if ((ds.Tables["ScriptRun"] != null)) {
                    this.Tables.Add(new ScriptRunDataTable(ds.Tables["ScriptRun"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SqlSyncBuildProjectDataTable SqlSyncBuildProject {
            get {
                return this.tableSqlSyncBuildProject;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptsDataTable Scripts {
            get {
                return this.tableScripts;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptDataTable Script {
            get {
                return this.tableScript;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BuildsDataTable Builds {
            get {
                return this.tableBuilds;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BuildDataTable Build {
            get {
                return this.tableBuild;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ScriptRunDataTable ScriptRun {
            get {
                return this.tableScriptRun;
            }
        }
        
        public override DataSet Clone() {
            SqlSyncBuildData cln = ((SqlSyncBuildData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SqlSyncBuildProject"] != null)) {
                this.Tables.Add(new SqlSyncBuildProjectDataTable(ds.Tables["SqlSyncBuildProject"]));
            }
            if ((ds.Tables["Scripts"] != null)) {
                this.Tables.Add(new ScriptsDataTable(ds.Tables["Scripts"]));
            }
            if ((ds.Tables["Script"] != null)) {
                this.Tables.Add(new ScriptDataTable(ds.Tables["Script"]));
            }
            if ((ds.Tables["Builds"] != null)) {
                this.Tables.Add(new BuildsDataTable(ds.Tables["Builds"]));
            }
            if ((ds.Tables["Build"] != null)) {
                this.Tables.Add(new BuildDataTable(ds.Tables["Build"]));
            }
            if ((ds.Tables["ScriptRun"] != null)) {
                this.Tables.Add(new ScriptRunDataTable(ds.Tables["ScriptRun"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableSqlSyncBuildProject = ((SqlSyncBuildProjectDataTable)(this.Tables["SqlSyncBuildProject"]));
            if ((this.tableSqlSyncBuildProject != null)) {
                this.tableSqlSyncBuildProject.InitVars();
            }
            this.tableScripts = ((ScriptsDataTable)(this.Tables["Scripts"]));
            if ((this.tableScripts != null)) {
                this.tableScripts.InitVars();
            }
            this.tableScript = ((ScriptDataTable)(this.Tables["Script"]));
            if ((this.tableScript != null)) {
                this.tableScript.InitVars();
            }
            this.tableBuilds = ((BuildsDataTable)(this.Tables["Builds"]));
            if ((this.tableBuilds != null)) {
                this.tableBuilds.InitVars();
            }
            this.tableBuild = ((BuildDataTable)(this.Tables["Build"]));
            if ((this.tableBuild != null)) {
                this.tableBuild.InitVars();
            }
            this.tableScriptRun = ((ScriptRunDataTable)(this.Tables["ScriptRun"]));
            if ((this.tableScriptRun != null)) {
                this.tableScriptRun.InitVars();
            }
            this.relationScripts_Script = this.Relations["Scripts_Script"];
            this.relationBuild_ScriptRun = this.Relations["Build_ScriptRun"];
            this.relationBuilds_Build = this.Relations["Builds_Build"];
            this.relationSqlSyncBuildProject_Scripts = this.Relations["SqlSyncBuildProject_Scripts"];
            this.relationSqlSyncBuildProject_Builds = this.Relations["SqlSyncBuildProject_Builds"];
        }
        
        private void InitClass() {
            this.DataSetName = "SqlSyncBuildData";
            this.Prefix = "";
            this.Namespace = "http://schemas.mckechney.com/SqlSyncBuildProject.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableSqlSyncBuildProject = new SqlSyncBuildProjectDataTable();
            this.Tables.Add(this.tableSqlSyncBuildProject);
            this.tableScripts = new ScriptsDataTable();
            this.Tables.Add(this.tableScripts);
            this.tableScript = new ScriptDataTable();
            this.Tables.Add(this.tableScript);
            this.tableBuilds = new BuildsDataTable();
            this.Tables.Add(this.tableBuilds);
            this.tableBuild = new BuildDataTable();
            this.Tables.Add(this.tableBuild);
            this.tableScriptRun = new ScriptRunDataTable();
            this.Tables.Add(this.tableScriptRun);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("SqlSyncBuildProject_Scripts", new DataColumn[] {
                        this.tableSqlSyncBuildProject.SqlSyncBuildProject_IdColumn}, new DataColumn[] {
                        this.tableScripts.SqlSyncBuildProject_IdColumn});
            this.tableScripts.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Scripts_Script", new DataColumn[] {
                        this.tableScripts.Scripts_IdColumn}, new DataColumn[] {
                        this.tableScript.Scripts_IdColumn});
            this.tableScript.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("SqlSyncBuildProject_Builds", new DataColumn[] {
                        this.tableSqlSyncBuildProject.SqlSyncBuildProject_IdColumn}, new DataColumn[] {
                        this.tableBuilds.SqlSyncBuildProject_IdColumn});
            this.tableBuilds.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Builds_Build", new DataColumn[] {
                        this.tableBuilds.Builds_IdColumn}, new DataColumn[] {
                        this.tableBuild.Builds_IdColumn});
            this.tableBuild.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new ForeignKeyConstraint("Build_ScriptRun", new DataColumn[] {
                        this.tableBuild.Build_IdColumn}, new DataColumn[] {
                        this.tableScriptRun.Build_IdColumn});
            this.tableScriptRun.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationScripts_Script = new DataRelation("Scripts_Script", new DataColumn[] {
                        this.tableScripts.Scripts_IdColumn}, new DataColumn[] {
                        this.tableScript.Scripts_IdColumn}, false);
            this.relationScripts_Script.Nested = true;
            this.Relations.Add(this.relationScripts_Script);
            this.relationBuild_ScriptRun = new DataRelation("Build_ScriptRun", new DataColumn[] {
                        this.tableBuild.Build_IdColumn}, new DataColumn[] {
                        this.tableScriptRun.Build_IdColumn}, false);
            this.relationBuild_ScriptRun.Nested = true;
            this.Relations.Add(this.relationBuild_ScriptRun);
            this.relationBuilds_Build = new DataRelation("Builds_Build", new DataColumn[] {
                        this.tableBuilds.Builds_IdColumn}, new DataColumn[] {
                        this.tableBuild.Builds_IdColumn}, false);
            this.relationBuilds_Build.Nested = true;
            this.Relations.Add(this.relationBuilds_Build);
            this.relationSqlSyncBuildProject_Scripts = new DataRelation("SqlSyncBuildProject_Scripts", new DataColumn[] {
                        this.tableSqlSyncBuildProject.SqlSyncBuildProject_IdColumn}, new DataColumn[] {
                        this.tableScripts.SqlSyncBuildProject_IdColumn}, false);
            this.relationSqlSyncBuildProject_Scripts.Nested = true;
            this.Relations.Add(this.relationSqlSyncBuildProject_Scripts);
            this.relationSqlSyncBuildProject_Builds = new DataRelation("SqlSyncBuildProject_Builds", new DataColumn[] {
                        this.tableSqlSyncBuildProject.SqlSyncBuildProject_IdColumn}, new DataColumn[] {
                        this.tableBuilds.SqlSyncBuildProject_IdColumn}, false);
            this.relationSqlSyncBuildProject_Builds.Nested = true;
            this.Relations.Add(this.relationSqlSyncBuildProject_Builds);
        }
        
        private bool ShouldSerializeSqlSyncBuildProject() {
            return false;
        }
        
        private bool ShouldSerializeScripts() {
            return false;
        }
        
        private bool ShouldSerializeScript() {
            return false;
        }
        
        private bool ShouldSerializeBuilds() {
            return false;
        }
        
        private bool ShouldSerializeBuild() {
            return false;
        }
        
        private bool ShouldSerializeScriptRun() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void SqlSyncBuildProjectRowChangeEventHandler(object sender, SqlSyncBuildProjectRowChangeEvent e);
        
        public delegate void ScriptsRowChangeEventHandler(object sender, ScriptsRowChangeEvent e);
        
        public delegate void ScriptRowChangeEventHandler(object sender, ScriptRowChangeEvent e);
        
        public delegate void BuildsRowChangeEventHandler(object sender, BuildsRowChangeEvent e);
        
        public delegate void BuildRowChangeEventHandler(object sender, BuildRowChangeEvent e);
        
        public delegate void ScriptRunRowChangeEventHandler(object sender, ScriptRunRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqlSyncBuildProjectDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnProjectName;
            
            private DataColumn columnSqlSyncBuildProject_Id;
            
            internal SqlSyncBuildProjectDataTable() : 
                    base("SqlSyncBuildProject") {
                this.InitClass();
            }
            
            internal SqlSyncBuildProjectDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn ProjectNameColumn {
                get {
                    return this.columnProjectName;
                }
            }
            
            internal DataColumn SqlSyncBuildProject_IdColumn {
                get {
                    return this.columnSqlSyncBuildProject_Id;
                }
            }
            
            public SqlSyncBuildProjectRow this[int index] {
                get {
                    return ((SqlSyncBuildProjectRow)(this.Rows[index]));
                }
            }
            
            public event SqlSyncBuildProjectRowChangeEventHandler SqlSyncBuildProjectRowChanged;
            
            public event SqlSyncBuildProjectRowChangeEventHandler SqlSyncBuildProjectRowChanging;
            
            public event SqlSyncBuildProjectRowChangeEventHandler SqlSyncBuildProjectRowDeleted;
            
            public event SqlSyncBuildProjectRowChangeEventHandler SqlSyncBuildProjectRowDeleting;
            
            public void AddSqlSyncBuildProjectRow(SqlSyncBuildProjectRow row) {
                this.Rows.Add(row);
            }
            
            public SqlSyncBuildProjectRow AddSqlSyncBuildProjectRow(string ProjectName) {
                SqlSyncBuildProjectRow rowSqlSyncBuildProjectRow = ((SqlSyncBuildProjectRow)(this.NewRow()));
                rowSqlSyncBuildProjectRow.ItemArray = new object[] {
                        ProjectName,
                        null};
                this.Rows.Add(rowSqlSyncBuildProjectRow);
                return rowSqlSyncBuildProjectRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                SqlSyncBuildProjectDataTable cln = ((SqlSyncBuildProjectDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new SqlSyncBuildProjectDataTable();
            }
            
            internal void InitVars() {
                this.columnProjectName = this.Columns["ProjectName"];
                this.columnSqlSyncBuildProject_Id = this.Columns["SqlSyncBuildProject_Id"];
            }
            
            private void InitClass() {
                this.columnProjectName = new DataColumn("ProjectName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnProjectName);
                this.columnSqlSyncBuildProject_Id = new DataColumn("SqlSyncBuildProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSqlSyncBuildProject_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnSqlSyncBuildProject_Id}, true));
                this.columnProjectName.Namespace = "";
                this.columnSqlSyncBuildProject_Id.AutoIncrement = true;
                this.columnSqlSyncBuildProject_Id.AllowDBNull = false;
                this.columnSqlSyncBuildProject_Id.Unique = true;
            }
            
            public SqlSyncBuildProjectRow NewSqlSyncBuildProjectRow() {
                return ((SqlSyncBuildProjectRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new SqlSyncBuildProjectRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SqlSyncBuildProjectRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SqlSyncBuildProjectRowChanged != null)) {
                    this.SqlSyncBuildProjectRowChanged(this, new SqlSyncBuildProjectRowChangeEvent(((SqlSyncBuildProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SqlSyncBuildProjectRowChanging != null)) {
                    this.SqlSyncBuildProjectRowChanging(this, new SqlSyncBuildProjectRowChangeEvent(((SqlSyncBuildProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SqlSyncBuildProjectRowDeleted != null)) {
                    this.SqlSyncBuildProjectRowDeleted(this, new SqlSyncBuildProjectRowChangeEvent(((SqlSyncBuildProjectRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SqlSyncBuildProjectRowDeleting != null)) {
                    this.SqlSyncBuildProjectRowDeleting(this, new SqlSyncBuildProjectRowChangeEvent(((SqlSyncBuildProjectRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSqlSyncBuildProjectRow(SqlSyncBuildProjectRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqlSyncBuildProjectRow : DataRow {
            
            private SqlSyncBuildProjectDataTable tableSqlSyncBuildProject;
            
            internal SqlSyncBuildProjectRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableSqlSyncBuildProject = ((SqlSyncBuildProjectDataTable)(this.Table));
            }
            
            public string ProjectName {
                get {
                    try {
                        return ((string)(this[this.tableSqlSyncBuildProject.ProjectNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSqlSyncBuildProject.ProjectNameColumn] = value;
                }
            }
            
            public bool IsProjectNameNull() {
                return this.IsNull(this.tableSqlSyncBuildProject.ProjectNameColumn);
            }
            
            public void SetProjectNameNull() {
                this[this.tableSqlSyncBuildProject.ProjectNameColumn] = System.Convert.DBNull;
            }
            
            public ScriptsRow[] GetScriptsRows() {
                return ((ScriptsRow[])(this.GetChildRows(this.Table.ChildRelations["SqlSyncBuildProject_Scripts"])));
            }
            
            public BuildsRow[] GetBuildsRows() {
                return ((BuildsRow[])(this.GetChildRows(this.Table.ChildRelations["SqlSyncBuildProject_Builds"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class SqlSyncBuildProjectRowChangeEvent : EventArgs {
            
            private SqlSyncBuildProjectRow eventRow;
            
            private DataRowAction eventAction;
            
            public SqlSyncBuildProjectRowChangeEvent(SqlSyncBuildProjectRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SqlSyncBuildProjectRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnScripts_Id;
            
            private DataColumn columnSqlSyncBuildProject_Id;
            
            internal ScriptsDataTable() : 
                    base("Scripts") {
                this.InitClass();
            }
            
            internal ScriptsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Scripts_IdColumn {
                get {
                    return this.columnScripts_Id;
                }
            }
            
            internal DataColumn SqlSyncBuildProject_IdColumn {
                get {
                    return this.columnSqlSyncBuildProject_Id;
                }
            }
            
            public ScriptsRow this[int index] {
                get {
                    return ((ScriptsRow)(this.Rows[index]));
                }
            }
            
            public event ScriptsRowChangeEventHandler ScriptsRowChanged;
            
            public event ScriptsRowChangeEventHandler ScriptsRowChanging;
            
            public event ScriptsRowChangeEventHandler ScriptsRowDeleted;
            
            public event ScriptsRowChangeEventHandler ScriptsRowDeleting;
            
            public void AddScriptsRow(ScriptsRow row) {
                this.Rows.Add(row);
            }
            
            public ScriptsRow AddScriptsRow(SqlSyncBuildProjectRow parentSqlSyncBuildProjectRowBySqlSyncBuildProject_Scripts) {
                ScriptsRow rowScriptsRow = ((ScriptsRow)(this.NewRow()));
                rowScriptsRow.ItemArray = new object[] {
                        null,
                        parentSqlSyncBuildProjectRowBySqlSyncBuildProject_Scripts[1]};
                this.Rows.Add(rowScriptsRow);
                return rowScriptsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ScriptsDataTable cln = ((ScriptsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ScriptsDataTable();
            }
            
            internal void InitVars() {
                this.columnScripts_Id = this.Columns["Scripts_Id"];
                this.columnSqlSyncBuildProject_Id = this.Columns["SqlSyncBuildProject_Id"];
            }
            
            private void InitClass() {
                this.columnScripts_Id = new DataColumn("Scripts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnScripts_Id);
                this.columnSqlSyncBuildProject_Id = new DataColumn("SqlSyncBuildProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSqlSyncBuildProject_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnScripts_Id}, true));
                this.columnScripts_Id.AutoIncrement = true;
                this.columnScripts_Id.AllowDBNull = false;
                this.columnScripts_Id.Unique = true;
            }
            
            public ScriptsRow NewScriptsRow() {
                return ((ScriptsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ScriptsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ScriptsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptsRowChanged != null)) {
                    this.ScriptsRowChanged(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptsRowChanging != null)) {
                    this.ScriptsRowChanging(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptsRowDeleted != null)) {
                    this.ScriptsRowDeleted(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptsRowDeleting != null)) {
                    this.ScriptsRowDeleting(this, new ScriptsRowChangeEvent(((ScriptsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveScriptsRow(ScriptsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptsRow : DataRow {
            
            private ScriptsDataTable tableScripts;
            
            internal ScriptsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableScripts = ((ScriptsDataTable)(this.Table));
            }
            
            public SqlSyncBuildProjectRow SqlSyncBuildProjectRow {
                get {
                    return ((SqlSyncBuildProjectRow)(this.GetParentRow(this.Table.ParentRelations["SqlSyncBuildProject_Scripts"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SqlSyncBuildProject_Scripts"]);
                }
            }
            
            public ScriptRow[] GetScriptRows() {
                return ((ScriptRow[])(this.GetChildRows(this.Table.ChildRelations["Scripts_Script"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptsRowChangeEvent : EventArgs {
            
            private ScriptsRow eventRow;
            
            private DataRowAction eventAction;
            
            public ScriptsRowChangeEvent(ScriptsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ScriptsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFileName;
            
            private DataColumn columnBuildOrder;
            
            private DataColumn columnDescription;
            
            private DataColumn columnRollBackOnError;
            
            private DataColumn columnCausesBuildFailure;
            
            private DataColumn columnScripts_Id;
            
            internal ScriptDataTable() : 
                    base("Script") {
                this.InitClass();
            }
            
            internal ScriptDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            internal DataColumn BuildOrderColumn {
                get {
                    return this.columnBuildOrder;
                }
            }
            
            internal DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            internal DataColumn RollBackOnErrorColumn {
                get {
                    return this.columnRollBackOnError;
                }
            }
            
            internal DataColumn CausesBuildFailureColumn {
                get {
                    return this.columnCausesBuildFailure;
                }
            }
            
            internal DataColumn Scripts_IdColumn {
                get {
                    return this.columnScripts_Id;
                }
            }
            
            public ScriptRow this[int index] {
                get {
                    return ((ScriptRow)(this.Rows[index]));
                }
            }
            
            public event ScriptRowChangeEventHandler ScriptRowChanged;
            
            public event ScriptRowChangeEventHandler ScriptRowChanging;
            
            public event ScriptRowChangeEventHandler ScriptRowDeleted;
            
            public event ScriptRowChangeEventHandler ScriptRowDeleting;
            
            public void AddScriptRow(ScriptRow row) {
                this.Rows.Add(row);
            }
            
            public ScriptRow AddScriptRow(string FileName, System.Double BuildOrder, string Description, bool RollBackOnError, bool CausesBuildFailure, ScriptsRow parentScriptsRowByScripts_Script) {
                ScriptRow rowScriptRow = ((ScriptRow)(this.NewRow()));
                rowScriptRow.ItemArray = new object[] {
                        FileName,
                        BuildOrder,
                        Description,
                        RollBackOnError,
                        CausesBuildFailure,
                        parentScriptsRowByScripts_Script[0]};
                this.Rows.Add(rowScriptRow);
                return rowScriptRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ScriptDataTable cln = ((ScriptDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ScriptDataTable();
            }
            
            internal void InitVars() {
                this.columnFileName = this.Columns["FileName"];
                this.columnBuildOrder = this.Columns["BuildOrder"];
                this.columnDescription = this.Columns["Description"];
                this.columnRollBackOnError = this.Columns["RollBackOnError"];
                this.columnCausesBuildFailure = this.Columns["CausesBuildFailure"];
                this.columnScripts_Id = this.Columns["Scripts_Id"];
            }
            
            private void InitClass() {
                this.columnFileName = new DataColumn("FileName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFileName);
                this.columnBuildOrder = new DataColumn("BuildOrder", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBuildOrder);
                this.columnDescription = new DataColumn("Description", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnDescription);
                this.columnRollBackOnError = new DataColumn("RollBackOnError", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRollBackOnError);
                this.columnCausesBuildFailure = new DataColumn("CausesBuildFailure", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnCausesBuildFailure);
                this.columnScripts_Id = new DataColumn("Scripts_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnScripts_Id);
                this.columnFileName.Namespace = "";
                this.columnBuildOrder.Namespace = "";
                this.columnDescription.Namespace = "";
                this.columnRollBackOnError.Namespace = "";
                this.columnCausesBuildFailure.Namespace = "";
            }
            
            public ScriptRow NewScriptRow() {
                return ((ScriptRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ScriptRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ScriptRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptRowChanged != null)) {
                    this.ScriptRowChanged(this, new ScriptRowChangeEvent(((ScriptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptRowChanging != null)) {
                    this.ScriptRowChanging(this, new ScriptRowChangeEvent(((ScriptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptRowDeleted != null)) {
                    this.ScriptRowDeleted(this, new ScriptRowChangeEvent(((ScriptRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptRowDeleting != null)) {
                    this.ScriptRowDeleting(this, new ScriptRowChangeEvent(((ScriptRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveScriptRow(ScriptRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptRow : DataRow {
            
            private ScriptDataTable tableScript;
            
            internal ScriptRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableScript = ((ScriptDataTable)(this.Table));
            }
            
            public string FileName {
                get {
                    if (this.IsFileNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableScript.FileNameColumn]));
                    }
                }
                set {
                    this[this.tableScript.FileNameColumn] = value;
                }
            }
            
            public System.Double BuildOrder {
                get {
                    if (this.IsBuildOrderNull()) {
                        return 0;
                    }
                    else {
                        return ((System.Double)(this[this.tableScript.BuildOrderColumn]));
                    }
                }
                set {
                    this[this.tableScript.BuildOrderColumn] = value;
                }
            }
            
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableScript.DescriptionColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScript.DescriptionColumn] = value;
                }
            }
            
            public bool RollBackOnError {
                get {
                    if (this.IsRollBackOnErrorNull()) {
                        return true;
                    }
                    else {
                        return ((bool)(this[this.tableScript.RollBackOnErrorColumn]));
                    }
                }
                set {
                    this[this.tableScript.RollBackOnErrorColumn] = value;
                }
            }
            
            public bool CausesBuildFailure {
                get {
                    if (this.IsCausesBuildFailureNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableScript.CausesBuildFailureColumn]));
                    }
                }
                set {
                    this[this.tableScript.CausesBuildFailureColumn] = value;
                }
            }
            
            public ScriptsRow ScriptsRow {
                get {
                    return ((ScriptsRow)(this.GetParentRow(this.Table.ParentRelations["Scripts_Script"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Scripts_Script"]);
                }
            }
            
            public bool IsFileNameNull() {
                return this.IsNull(this.tableScript.FileNameColumn);
            }
            
            public void SetFileNameNull() {
                this[this.tableScript.FileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsBuildOrderNull() {
                return this.IsNull(this.tableScript.BuildOrderColumn);
            }
            
            public void SetBuildOrderNull() {
                this[this.tableScript.BuildOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableScript.DescriptionColumn);
            }
            
            public void SetDescriptionNull() {
                this[this.tableScript.DescriptionColumn] = System.Convert.DBNull;
            }
            
            public bool IsRollBackOnErrorNull() {
                return this.IsNull(this.tableScript.RollBackOnErrorColumn);
            }
            
            public void SetRollBackOnErrorNull() {
                this[this.tableScript.RollBackOnErrorColumn] = System.Convert.DBNull;
            }
            
            public bool IsCausesBuildFailureNull() {
                return this.IsNull(this.tableScript.CausesBuildFailureColumn);
            }
            
            public void SetCausesBuildFailureNull() {
                this[this.tableScript.CausesBuildFailureColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptRowChangeEvent : EventArgs {
            
            private ScriptRow eventRow;
            
            private DataRowAction eventAction;
            
            public ScriptRowChangeEvent(ScriptRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ScriptRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildsDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnBuilds_Id;
            
            private DataColumn columnSqlSyncBuildProject_Id;
            
            internal BuildsDataTable() : 
                    base("Builds") {
                this.InitClass();
            }
            
            internal BuildsDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn Builds_IdColumn {
                get {
                    return this.columnBuilds_Id;
                }
            }
            
            internal DataColumn SqlSyncBuildProject_IdColumn {
                get {
                    return this.columnSqlSyncBuildProject_Id;
                }
            }
            
            public BuildsRow this[int index] {
                get {
                    return ((BuildsRow)(this.Rows[index]));
                }
            }
            
            public event BuildsRowChangeEventHandler BuildsRowChanged;
            
            public event BuildsRowChangeEventHandler BuildsRowChanging;
            
            public event BuildsRowChangeEventHandler BuildsRowDeleted;
            
            public event BuildsRowChangeEventHandler BuildsRowDeleting;
            
            public void AddBuildsRow(BuildsRow row) {
                this.Rows.Add(row);
            }
            
            public BuildsRow AddBuildsRow(SqlSyncBuildProjectRow parentSqlSyncBuildProjectRowBySqlSyncBuildProject_Builds) {
                BuildsRow rowBuildsRow = ((BuildsRow)(this.NewRow()));
                rowBuildsRow.ItemArray = new object[] {
                        null,
                        parentSqlSyncBuildProjectRowBySqlSyncBuildProject_Builds[1]};
                this.Rows.Add(rowBuildsRow);
                return rowBuildsRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BuildsDataTable cln = ((BuildsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BuildsDataTable();
            }
            
            internal void InitVars() {
                this.columnBuilds_Id = this.Columns["Builds_Id"];
                this.columnSqlSyncBuildProject_Id = this.Columns["SqlSyncBuildProject_Id"];
            }
            
            private void InitClass() {
                this.columnBuilds_Id = new DataColumn("Builds_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnBuilds_Id);
                this.columnSqlSyncBuildProject_Id = new DataColumn("SqlSyncBuildProject_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnSqlSyncBuildProject_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnBuilds_Id}, true));
                this.columnBuilds_Id.AutoIncrement = true;
                this.columnBuilds_Id.AllowDBNull = false;
                this.columnBuilds_Id.Unique = true;
            }
            
            public BuildsRow NewBuildsRow() {
                return ((BuildsRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BuildsRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BuildsRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BuildsRowChanged != null)) {
                    this.BuildsRowChanged(this, new BuildsRowChangeEvent(((BuildsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BuildsRowChanging != null)) {
                    this.BuildsRowChanging(this, new BuildsRowChangeEvent(((BuildsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BuildsRowDeleted != null)) {
                    this.BuildsRowDeleted(this, new BuildsRowChangeEvent(((BuildsRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BuildsRowDeleting != null)) {
                    this.BuildsRowDeleting(this, new BuildsRowChangeEvent(((BuildsRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBuildsRow(BuildsRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildsRow : DataRow {
            
            private BuildsDataTable tableBuilds;
            
            internal BuildsRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBuilds = ((BuildsDataTable)(this.Table));
            }
            
            public SqlSyncBuildProjectRow SqlSyncBuildProjectRow {
                get {
                    return ((SqlSyncBuildProjectRow)(this.GetParentRow(this.Table.ParentRelations["SqlSyncBuildProject_Builds"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SqlSyncBuildProject_Builds"]);
                }
            }
            
            public BuildRow[] GetBuildRows() {
                return ((BuildRow[])(this.GetChildRows(this.Table.ChildRelations["Builds_Build"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildsRowChangeEvent : EventArgs {
            
            private BuildsRow eventRow;
            
            private DataRowAction eventAction;
            
            public BuildsRowChangeEvent(BuildsRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BuildsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnBuildType;
            
            private DataColumn columnBuildStart;
            
            private DataColumn columnBuildEnd;
            
            private DataColumn columnBuild_Id;
            
            private DataColumn columnBuilds_Id;
            
            internal BuildDataTable() : 
                    base("Build") {
                this.InitClass();
            }
            
            internal BuildDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn BuildTypeColumn {
                get {
                    return this.columnBuildType;
                }
            }
            
            internal DataColumn BuildStartColumn {
                get {
                    return this.columnBuildStart;
                }
            }
            
            internal DataColumn BuildEndColumn {
                get {
                    return this.columnBuildEnd;
                }
            }
            
            internal DataColumn Build_IdColumn {
                get {
                    return this.columnBuild_Id;
                }
            }
            
            internal DataColumn Builds_IdColumn {
                get {
                    return this.columnBuilds_Id;
                }
            }
            
            public BuildRow this[int index] {
                get {
                    return ((BuildRow)(this.Rows[index]));
                }
            }
            
            public event BuildRowChangeEventHandler BuildRowChanged;
            
            public event BuildRowChangeEventHandler BuildRowChanging;
            
            public event BuildRowChangeEventHandler BuildRowDeleted;
            
            public event BuildRowChangeEventHandler BuildRowDeleting;
            
            public void AddBuildRow(BuildRow row) {
                this.Rows.Add(row);
            }
            
            public BuildRow AddBuildRow(string Name, string BuildType, System.DateTime BuildStart, System.DateTime BuildEnd, BuildsRow parentBuildsRowByBuilds_Build) {
                BuildRow rowBuildRow = ((BuildRow)(this.NewRow()));
                rowBuildRow.ItemArray = new object[] {
                        Name,
                        BuildType,
                        BuildStart,
                        BuildEnd,
                        null,
                        parentBuildsRowByBuilds_Build[0]};
                this.Rows.Add(rowBuildRow);
                return rowBuildRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                BuildDataTable cln = ((BuildDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new BuildDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnBuildType = this.Columns["BuildType"];
                this.columnBuildStart = this.Columns["BuildStart"];
                this.columnBuildEnd = this.Columns["BuildEnd"];
                this.columnBuild_Id = this.Columns["Build_Id"];
                this.columnBuilds_Id = this.Columns["Builds_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnBuildType = new DataColumn("BuildType", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBuildType);
                this.columnBuildStart = new DataColumn("BuildStart", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBuildStart);
                this.columnBuildEnd = new DataColumn("BuildEnd", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnBuildEnd);
                this.columnBuild_Id = new DataColumn("Build_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnBuild_Id);
                this.columnBuilds_Id = new DataColumn("Builds_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnBuilds_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnBuild_Id}, true));
                this.columnName.Namespace = "";
                this.columnBuildType.Namespace = "";
                this.columnBuildStart.Namespace = "";
                this.columnBuildEnd.Namespace = "";
                this.columnBuild_Id.AutoIncrement = true;
                this.columnBuild_Id.AllowDBNull = false;
                this.columnBuild_Id.Unique = true;
            }
            
            public BuildRow NewBuildRow() {
                return ((BuildRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new BuildRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(BuildRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BuildRowChanged != null)) {
                    this.BuildRowChanged(this, new BuildRowChangeEvent(((BuildRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BuildRowChanging != null)) {
                    this.BuildRowChanging(this, new BuildRowChangeEvent(((BuildRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BuildRowDeleted != null)) {
                    this.BuildRowDeleted(this, new BuildRowChangeEvent(((BuildRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BuildRowDeleting != null)) {
                    this.BuildRowDeleting(this, new BuildRowChangeEvent(((BuildRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveBuildRow(BuildRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildRow : DataRow {
            
            private BuildDataTable tableBuild;
            
            internal BuildRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableBuild = ((BuildDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableBuild.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuild.NameColumn] = value;
                }
            }
            
            public string BuildType {
                get {
                    try {
                        return ((string)(this[this.tableBuild.BuildTypeColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuild.BuildTypeColumn] = value;
                }
            }
            
            public System.DateTime BuildStart {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBuild.BuildStartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuild.BuildStartColumn] = value;
                }
            }
            
            public System.DateTime BuildEnd {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableBuild.BuildEndColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBuild.BuildEndColumn] = value;
                }
            }
            
            public BuildsRow BuildsRow {
                get {
                    return ((BuildsRow)(this.GetParentRow(this.Table.ParentRelations["Builds_Build"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Builds_Build"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableBuild.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableBuild.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsBuildTypeNull() {
                return this.IsNull(this.tableBuild.BuildTypeColumn);
            }
            
            public void SetBuildTypeNull() {
                this[this.tableBuild.BuildTypeColumn] = System.Convert.DBNull;
            }
            
            public bool IsBuildStartNull() {
                return this.IsNull(this.tableBuild.BuildStartColumn);
            }
            
            public void SetBuildStartNull() {
                this[this.tableBuild.BuildStartColumn] = System.Convert.DBNull;
            }
            
            public bool IsBuildEndNull() {
                return this.IsNull(this.tableBuild.BuildEndColumn);
            }
            
            public void SetBuildEndNull() {
                this[this.tableBuild.BuildEndColumn] = System.Convert.DBNull;
            }
            
            public ScriptRunRow[] GetScriptRunRows() {
                return ((ScriptRunRow[])(this.GetChildRows(this.Table.ChildRelations["Build_ScriptRun"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class BuildRowChangeEvent : EventArgs {
            
            private BuildRow eventRow;
            
            private DataRowAction eventAction;
            
            public BuildRowChangeEvent(BuildRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public BuildRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptRunDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnFileHash;
            
            private DataColumn columnResults;
            
            private DataColumn columnFileName;
            
            private DataColumn columnRunOrder;
            
            private DataColumn columnRunStart;
            
            private DataColumn columnRunEnd;
            
            private DataColumn columnSuccess;
            
            private DataColumn columnBuild_Id;
            
            internal ScriptRunDataTable() : 
                    base("ScriptRun") {
                this.InitClass();
            }
            
            internal ScriptRunDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn FileHashColumn {
                get {
                    return this.columnFileHash;
                }
            }
            
            internal DataColumn ResultsColumn {
                get {
                    return this.columnResults;
                }
            }
            
            internal DataColumn FileNameColumn {
                get {
                    return this.columnFileName;
                }
            }
            
            internal DataColumn RunOrderColumn {
                get {
                    return this.columnRunOrder;
                }
            }
            
            internal DataColumn RunStartColumn {
                get {
                    return this.columnRunStart;
                }
            }
            
            internal DataColumn RunEndColumn {
                get {
                    return this.columnRunEnd;
                }
            }
            
            internal DataColumn SuccessColumn {
                get {
                    return this.columnSuccess;
                }
            }
            
            internal DataColumn Build_IdColumn {
                get {
                    return this.columnBuild_Id;
                }
            }
            
            public ScriptRunRow this[int index] {
                get {
                    return ((ScriptRunRow)(this.Rows[index]));
                }
            }
            
            public event ScriptRunRowChangeEventHandler ScriptRunRowChanged;
            
            public event ScriptRunRowChangeEventHandler ScriptRunRowChanging;
            
            public event ScriptRunRowChangeEventHandler ScriptRunRowDeleted;
            
            public event ScriptRunRowChangeEventHandler ScriptRunRowDeleting;
            
            public void AddScriptRunRow(ScriptRunRow row) {
                this.Rows.Add(row);
            }
            
            public ScriptRunRow AddScriptRunRow(string FileHash, string Results, string FileName, System.Double RunOrder, System.DateTime RunStart, System.DateTime RunEnd, bool Success, BuildRow parentBuildRowByBuild_ScriptRun) {
                ScriptRunRow rowScriptRunRow = ((ScriptRunRow)(this.NewRow()));
                rowScriptRunRow.ItemArray = new object[] {
                        FileHash,
                        Results,
                        FileName,
                        RunOrder,
                        RunStart,
                        RunEnd,
                        Success,
                        parentBuildRowByBuild_ScriptRun[4]};
                this.Rows.Add(rowScriptRunRow);
                return rowScriptRunRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                ScriptRunDataTable cln = ((ScriptRunDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new ScriptRunDataTable();
            }
            
            internal void InitVars() {
                this.columnFileHash = this.Columns["FileHash"];
                this.columnResults = this.Columns["Results"];
                this.columnFileName = this.Columns["FileName"];
                this.columnRunOrder = this.Columns["RunOrder"];
                this.columnRunStart = this.Columns["RunStart"];
                this.columnRunEnd = this.Columns["RunEnd"];
                this.columnSuccess = this.Columns["Success"];
                this.columnBuild_Id = this.Columns["Build_Id"];
            }
            
            private void InitClass() {
                this.columnFileHash = new DataColumn("FileHash", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnFileHash);
                this.columnResults = new DataColumn("Results", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnResults);
                this.columnFileName = new DataColumn("FileName", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnFileName);
                this.columnRunOrder = new DataColumn("RunOrder", typeof(System.Double), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunOrder);
                this.columnRunStart = new DataColumn("RunStart", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunStart);
                this.columnRunEnd = new DataColumn("RunEnd", typeof(System.DateTime), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnRunEnd);
                this.columnSuccess = new DataColumn("Success", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnSuccess);
                this.columnBuild_Id = new DataColumn("Build_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnBuild_Id);
                this.columnFileName.Namespace = "";
                this.columnRunOrder.Namespace = "";
                this.columnRunStart.Namespace = "";
                this.columnRunEnd.Namespace = "";
                this.columnSuccess.Namespace = "";
            }
            
            public ScriptRunRow NewScriptRunRow() {
                return ((ScriptRunRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new ScriptRunRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(ScriptRunRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ScriptRunRowChanged != null)) {
                    this.ScriptRunRowChanged(this, new ScriptRunRowChangeEvent(((ScriptRunRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ScriptRunRowChanging != null)) {
                    this.ScriptRunRowChanging(this, new ScriptRunRowChangeEvent(((ScriptRunRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ScriptRunRowDeleted != null)) {
                    this.ScriptRunRowDeleted(this, new ScriptRunRowChangeEvent(((ScriptRunRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ScriptRunRowDeleting != null)) {
                    this.ScriptRunRowDeleting(this, new ScriptRunRowChangeEvent(((ScriptRunRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveScriptRunRow(ScriptRunRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptRunRow : DataRow {
            
            private ScriptRunDataTable tableScriptRun;
            
            internal ScriptRunRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableScriptRun = ((ScriptRunDataTable)(this.Table));
            }
            
            public string FileHash {
                get {
                    try {
                        return ((string)(this[this.tableScriptRun.FileHashColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptRun.FileHashColumn] = value;
                }
            }
            
            public string Results {
                get {
                    try {
                        return ((string)(this[this.tableScriptRun.ResultsColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptRun.ResultsColumn] = value;
                }
            }
            
            public string FileName {
                get {
                    try {
                        return ((string)(this[this.tableScriptRun.FileNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptRun.FileNameColumn] = value;
                }
            }
            
            public System.Double RunOrder {
                get {
                    try {
                        return ((System.Double)(this[this.tableScriptRun.RunOrderColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptRun.RunOrderColumn] = value;
                }
            }
            
            public System.DateTime RunStart {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableScriptRun.RunStartColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptRun.RunStartColumn] = value;
                }
            }
            
            public System.DateTime RunEnd {
                get {
                    try {
                        return ((System.DateTime)(this[this.tableScriptRun.RunEndColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptRun.RunEndColumn] = value;
                }
            }
            
            public bool Success {
                get {
                    try {
                        return ((bool)(this[this.tableScriptRun.SuccessColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableScriptRun.SuccessColumn] = value;
                }
            }
            
            public BuildRow BuildRow {
                get {
                    return ((BuildRow)(this.GetParentRow(this.Table.ParentRelations["Build_ScriptRun"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Build_ScriptRun"]);
                }
            }
            
            public bool IsFileHashNull() {
                return this.IsNull(this.tableScriptRun.FileHashColumn);
            }
            
            public void SetFileHashNull() {
                this[this.tableScriptRun.FileHashColumn] = System.Convert.DBNull;
            }
            
            public bool IsResultsNull() {
                return this.IsNull(this.tableScriptRun.ResultsColumn);
            }
            
            public void SetResultsNull() {
                this[this.tableScriptRun.ResultsColumn] = System.Convert.DBNull;
            }
            
            public bool IsFileNameNull() {
                return this.IsNull(this.tableScriptRun.FileNameColumn);
            }
            
            public void SetFileNameNull() {
                this[this.tableScriptRun.FileNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunOrderNull() {
                return this.IsNull(this.tableScriptRun.RunOrderColumn);
            }
            
            public void SetRunOrderNull() {
                this[this.tableScriptRun.RunOrderColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunStartNull() {
                return this.IsNull(this.tableScriptRun.RunStartColumn);
            }
            
            public void SetRunStartNull() {
                this[this.tableScriptRun.RunStartColumn] = System.Convert.DBNull;
            }
            
            public bool IsRunEndNull() {
                return this.IsNull(this.tableScriptRun.RunEndColumn);
            }
            
            public void SetRunEndNull() {
                this[this.tableScriptRun.RunEndColumn] = System.Convert.DBNull;
            }
            
            public bool IsSuccessNull() {
                return this.IsNull(this.tableScriptRun.SuccessColumn);
            }
            
            public void SetSuccessNull() {
                this[this.tableScriptRun.SuccessColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class ScriptRunRowChangeEvent : EventArgs {
            
            private ScriptRunRow eventRow;
            
            private DataRowAction eventAction;
            
            public ScriptRunRowChangeEvent(ScriptRunRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public ScriptRunRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
