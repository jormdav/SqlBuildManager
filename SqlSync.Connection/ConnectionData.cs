// ------------------------------------------------------------------------------
// <autogenerated>
//      This code was generated by a the SimpleDataClassGenerator tool.
//      (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
// 		<Version> 3.3.1.27814 </Version>
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
// <autogenerated>
// ------------------------------------------------------------------------------
namespace SqlSync.Connection {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignerCategory("Component")]
    [System.ComponentModel.DesignTimeVisible(true)]
    [System.Drawing.ToolboxBitmap(typeof(System.Data.DataSet))]
    public partial class ConnectionData {
        
        private string _SQLServerName = string.Empty;
        
        private string _DatabaseName = string.Empty;
        
        private string _Password = string.Empty;
        
        private string _UserId = string.Empty;
        
        private string _StartingDirectory = string.Empty;
        
        private bool _UseWindowAuthentication = false;
        
        private int _ScriptTimeout = 20;
        
        private System.Collections.Hashtable _validationDict;
        
        public ConnectionData() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("SQLServerName", false);
            this._validationDict.Add("DatabaseName", false);
            this._validationDict.Add("Password", false);
            this._validationDict.Add("UserId", false);
            this._validationDict.Add("StartingDirectory", false);
            this._validationDict.Add("UseWindowAuthentication", false);
            this._validationDict.Add("ScriptTimeout", false);
        }
        
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        public virtual string SQLServerName {
            get {
                return this._SQLServerName;
            }
            set {
                this._SQLServerName = value;
                this._validationDict["SQLServerName"] = true;
            }
        }
        
        public virtual string DatabaseName {
            get {
                return this._DatabaseName;
            }
            set {
                this._DatabaseName = value;
                this._validationDict["DatabaseName"] = true;
            }
        }
        
        public virtual string Password {
            get {
                return this._Password;
            }
            set {
                this._Password = value;
                this._validationDict["Password"] = true;
            }
        }
        
        public virtual string UserId {
            get {
                return this._UserId;
            }
            set {
                this._UserId = value;
                this._validationDict["UserId"] = true;
            }
        }
        
        public virtual string StartingDirectory {
            get {
                return this._StartingDirectory;
            }
            set {
                this._StartingDirectory = value;
                this._validationDict["StartingDirectory"] = true;
            }
        }
        
        public virtual bool UseWindowAuthentication {
            get {
                return this._UseWindowAuthentication;
            }
            set {
                this._UseWindowAuthentication = value;
                this._validationDict["UseWindowAuthentication"] = true;
            }
        }
        
        public virtual int ScriptTimeout {
            get {
                return this._ScriptTimeout;
            }
            set {
                this._ScriptTimeout = value;
                this._validationDict["ScriptTimeout"] = true;
            }
        }
        
        public virtual string StrSQLServerName {
            get {
                return this._SQLServerName.ToString();
            }
        }
        
        public virtual string StrDatabaseName {
            get {
                return this._DatabaseName.ToString();
            }
        }
        
        public virtual string StrPassword {
            get {
                return this._Password.ToString();
            }
        }
        
        public virtual string StrUserId {
            get {
                return this._UserId.ToString();
            }
        }
        
        public virtual string StrStartingDirectory {
            get {
                return this._StartingDirectory.ToString();
            }
        }
        
        public virtual string StrUseWindowAuthentication {
            get {
                return this._UseWindowAuthentication.ToString();
            }
        }
        
        public virtual string StrScriptTimeout {
            get {
                return this._ScriptTimeout.ToString();
            }
        }
        
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StrSQLServerName);
                sb.Append(delimiter);
                sb.Append(this.StrDatabaseName);
                sb.Append(delimiter);
                sb.Append(this.StrPassword);
                sb.Append(delimiter);
                sb.Append(this.StrUserId);
                sb.Append(delimiter);
                sb.Append(this.StrStartingDirectory);
                sb.Append(delimiter);
                sb.Append(this.StrUseWindowAuthentication);
                sb.Append(delimiter);
                sb.Append(this.StrScriptTimeout);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        public virtual bool Fill(ConnectionData dataClass) {
            try {
                this.SQLServerName = dataClass.SQLServerName;
                this.DatabaseName = dataClass.DatabaseName;
                this.Password = dataClass.Password;
                this.UserId = dataClass.UserId;
                this.StartingDirectory = dataClass.StartingDirectory;
                this.UseWindowAuthentication = dataClass.UseWindowAuthentication;
                this.ScriptTimeout = dataClass.ScriptTimeout;
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.Fill(ConnectionData) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Data.SqlClient.SqlDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader == true)) {
                    reader.Close();
                }
            }
        }
        
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection nameValueColl) {
            try {
                if ((nameValueColl.GetValues("SQLServerName") != null)) {
                    this.SQLServerName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("SQLServerName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("DatabaseName") != null)) {
                    this.DatabaseName = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("DatabaseName")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("Password") != null)) {
                    this.Password = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("Password")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("UserId") != null)) {
                    this.UserId = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("UserId")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("StartingDirectory") != null)) {
                    this.StartingDirectory = ((string)(System.Convert.ChangeType(nameValueColl.GetValues("StartingDirectory")[0], typeof(string))));
                }
                if ((nameValueColl.GetValues("UseWindowAuthentication") != null)) {
                    this.UseWindowAuthentication = ((bool)(System.Convert.ChangeType(nameValueColl.GetValues("UseWindowAuthentication")[0], typeof(bool))));
                }
                if ((nameValueColl.GetValues("ScriptTimeout") != null)) {
                    this.ScriptTimeout = ((int)(System.Convert.ChangeType(nameValueColl.GetValues("ScriptTimeout")[0], typeof(int))));
                }
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.Fill(NameValueCollection) Method", ex);
            }
        }
        
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.SQLServerName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(string))));
                this.DatabaseName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(string))));
                this.Password = ((string)(System.Convert.ChangeType(sourceArray.GetValue(2), typeof(string))));
                this.UserId = ((string)(System.Convert.ChangeType(sourceArray.GetValue(3), typeof(string))));
                this.StartingDirectory = ((string)(System.Convert.ChangeType(sourceArray.GetValue(4), typeof(string))));
                this.UseWindowAuthentication = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(5), typeof(bool))));
                this.ScriptTimeout = ((int)(System.Convert.ChangeType(sourceArray.GetValue(6), typeof(int))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.Fill(System.Array) Method", ex);
            }
        }
        
        public virtual bool Fill(string delimString, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimString.Split(delimiter);
            try {
                this.SQLServerName = ((string)(System.Convert.ChangeType(arrSplitString[0], typeof(string))));
                this.DatabaseName = ((string)(System.Convert.ChangeType(arrSplitString[1], typeof(string))));
                this.Password = ((string)(System.Convert.ChangeType(arrSplitString[2], typeof(string))));
                this.UserId = ((string)(System.Convert.ChangeType(arrSplitString[3], typeof(string))));
                this.StartingDirectory = ((string)(System.Convert.ChangeType(arrSplitString[4], typeof(string))));
                this.UseWindowAuthentication = ((bool)(System.Convert.ChangeType(arrSplitString[5], typeof(bool))));
                this.ScriptTimeout = ((int)(System.Convert.ChangeType(arrSplitString[6], typeof(int))));
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.Fill(string,char) Method", ex);
            }
        }
        
        public virtual bool Fill(string fixedString) {
            try {
                return true;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.Fill(string) Method", ex);
            }
        }
        
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.SQLServerName.ToString());
                sb.Append(delimiter);
                sb.Append(this.DatabaseName.ToString());
                sb.Append(delimiter);
                sb.Append(this.Password.ToString());
                sb.Append(delimiter);
                sb.Append(this.UserId.ToString());
                sb.Append(delimiter);
                sb.Append(this.StartingDirectory.ToString());
                sb.Append(delimiter);
                sb.Append(this.UseWindowAuthentication.ToString());
                sb.Append(delimiter);
                sb.Append(this.ScriptTimeout.ToString());
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.GetDelimitedString(string) Method", ex);
            }
        }
        
        public virtual string[] GetStringArray() {
            string[] myArray = new string[7];
            try {
                myArray[0] = this._SQLServerName.ToString();
                myArray[1] = this._DatabaseName.ToString();
                myArray[2] = this._Password.ToString();
                myArray[3] = this._UserId.ToString();
                myArray[4] = this._StartingDirectory.ToString();
                myArray[5] = this._UseWindowAuthentication.ToString();
                myArray[6] = this._ScriptTimeout.ToString();
                return myArray;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.GetStringArray() Method", ex);
            }
        }
        
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("SQLServerName", this.SQLServerName.ToString());
                nameValueColl.Add("DatabaseName", this.DatabaseName.ToString());
                nameValueColl.Add("Password", this.Password.ToString());
                nameValueColl.Add("UserId", this.UserId.ToString());
                nameValueColl.Add("StartingDirectory", this.StartingDirectory.ToString());
                nameValueColl.Add("UseWindowAuthentication", this.UseWindowAuthentication.ToString());
                nameValueColl.Add("ScriptTimeout", this.ScriptTimeout.ToString());
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new System.ApplicationException("Error in the Auto-Generated: ConnectionData.GetNameValueCollection() Method", ex);
            }
        }
        
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["SQLServerName"], typeof(bool)))) == false)) {
                missingValues.Add("SQLServerName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["DatabaseName"], typeof(bool)))) == false)) {
                missingValues.Add("DatabaseName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Password"], typeof(bool)))) == false)) {
                missingValues.Add("Password");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["UserId"], typeof(bool)))) == false)) {
                missingValues.Add("UserId");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["StartingDirectory"], typeof(bool)))) == false)) {
                missingValues.Add("StartingDirectory");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["UseWindowAuthentication"], typeof(bool)))) == false)) {
                missingValues.Add("UseWindowAuthentication");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ScriptTimeout"], typeof(bool)))) == false)) {
                missingValues.Add("ScriptTimeout");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
}
