// -------------------------------------------------------------------------------------------------
// <autogenerated>
//    This code was generated by a the SimpleDataClassGenerator tool.
//    (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
//    <Version> 9.2.4.4 </Version>
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// <autogenerated>
// -------------------------------------------------------------------------------------------------
namespace SqlSync.SqlBuild {
    using System;
    using System.Globalization;
    
    
    [System.Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignTimeVisible(true)]
    public partial class CommandLineArgs {
        
        private bool _BuildDesignated = false;
        
        private string _BuildFileName = string.Empty;
        
        private bool _AutoScriptDesignated = false;
        
        private string _AutoScriptFileName = string.Empty;
        
        private bool _OverrideDesignated = false;
        
        private string _MultiDbRunConfigFileName = string.Empty;
        
        private string _ManualOverRideSets = string.Empty;
        
        private string _Server = string.Empty;
        
        private System.Collections.Specialized.StringDictionary _ArgumentCollection = new System.Collections.Specialized.StringDictionary();
        
        private string[] _RawArguments = new string[0];
        
        private string _LogFileName = string.Empty;
        
        private bool _SprocTestDesignated = false;
        
        private string _Database = string.Empty;
        
        private string _SpTestFile = string.Empty;
        
        private string _ScriptLogFileName = string.Empty;
        
        private string _RootLoggingPath = string.Empty;
        
        private bool _LogAsText = true;
        
        private bool _Trial = false;
        
        private string _ScriptSrcDir = string.Empty;
        
        private string _UserName = string.Empty;
        
        private string _Password = string.Empty;
        
        private string _LogToDatabaseName = string.Empty;
        
        private string _Description = string.Empty;
        
        private bool _Transactional = true;
        
        private string _RemoteServers = string.Empty;
        
        private string _DistributionType = string.Empty;
        
        private int _AllowableTimeoutRetries = 0;
        
        private int fillCount;
        
        private System.Collections.Hashtable _validationDict;
        
        public CommandLineArgs() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("BuildDesignated", false);
            this._validationDict.Add("BuildFileName", false);
            this._validationDict.Add("AutoScriptDesignated", false);
            this._validationDict.Add("AutoScriptFileName", false);
            this._validationDict.Add("OverrideDesignated", false);
            this._validationDict.Add("MultiDbRunConfigFileName", false);
            this._validationDict.Add("ManualOverRideSets", false);
            this._validationDict.Add("Server", false);
            this._validationDict.Add("ArgumentCollection", false);
            this._validationDict.Add("RawArguments", false);
            this._validationDict.Add("LogFileName", false);
            this._validationDict.Add("SprocTestDesignated", false);
            this._validationDict.Add("Database", false);
            this._validationDict.Add("SpTestFile", false);
            this._validationDict.Add("ScriptLogFileName", false);
            this._validationDict.Add("RootLoggingPath", false);
            this._validationDict.Add("LogAsText", false);
            this._validationDict.Add("Trial", false);
            this._validationDict.Add("ScriptSrcDir", false);
            this._validationDict.Add("UserName", false);
            this._validationDict.Add("Password", false);
            this._validationDict.Add("LogToDatabaseName", false);
            this._validationDict.Add("Description", false);
            this._validationDict.Add("Transactional", false);
            this._validationDict.Add("RemoteServers", false);
            this._validationDict.Add("DistributionType", false);
            this._validationDict.Add("AllowableTimeoutRetries", false);
        }
        
        /// <summary>
        ///Reflects how many times a "Fill" method had been successfully called on the object:
        ///0 = Fill has never been called;
        ///1 = Fill has been successful;
        ///Greater then 1 means Fill has been called more than once and you may have overwritten data.
        ///</summary>
        public virtual int FillCount {
            get {
                return this.fillCount;
            }
        }
        
        /// <summary>
        ///Will return true if all data fields have been set with non-Null values
        ///</summary>
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        /// <summary>
        ///Storage property for "BuildDesignated" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual bool BuildDesignated {
            get {
                return this._BuildDesignated;
            }
            set {
                this._BuildDesignated = value;
                this._validationDict["BuildDesignated"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "BuildFileName" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string BuildFileName {
            get {
                return this._BuildFileName;
            }
            set {
                this._BuildFileName = value;
                this._validationDict["BuildFileName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "AutoScriptDesignated" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual bool AutoScriptDesignated {
            get {
                return this._AutoScriptDesignated;
            }
            set {
                this._AutoScriptDesignated = value;
                this._validationDict["AutoScriptDesignated"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "AutoScriptFileName" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string AutoScriptFileName {
            get {
                return this._AutoScriptFileName;
            }
            set {
                this._AutoScriptFileName = value;
                this._validationDict["AutoScriptFileName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "OverrideDesignated" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual bool OverrideDesignated {
            get {
                return this._OverrideDesignated;
            }
            set {
                this._OverrideDesignated = value;
                this._validationDict["OverrideDesignated"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "MultiDbRunConfigFileName" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string MultiDbRunConfigFileName {
            get {
                return this._MultiDbRunConfigFileName;
            }
            set {
                this._MultiDbRunConfigFileName = value;
                this._validationDict["MultiDbRunConfigFileName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "ManualOverRideSets" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string ManualOverRideSets {
            get {
                return this._ManualOverRideSets;
            }
            set {
                this._ManualOverRideSets = value;
                this._validationDict["ManualOverRideSets"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "Server" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string Server {
            get {
                return this._Server;
            }
            set {
                this._Server = value;
                this._validationDict["Server"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "ArgumentCollection" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual System.Collections.Specialized.StringDictionary ArgumentCollection {
            get {
                return this._ArgumentCollection;
            }
            set {
                this._ArgumentCollection = value;
                this._validationDict["ArgumentCollection"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "RawArguments" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string[] RawArguments {
            get {
                return this._RawArguments;
            }
            set {
                this._RawArguments = value;
                this._validationDict["RawArguments"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "LogFileName" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string LogFileName {
            get {
                return this._LogFileName;
            }
            set {
                this._LogFileName = value;
                this._validationDict["LogFileName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "SprocTestDesignated" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual bool SprocTestDesignated {
            get {
                return this._SprocTestDesignated;
            }
            set {
                this._SprocTestDesignated = value;
                this._validationDict["SprocTestDesignated"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "Database" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string Database {
            get {
                return this._Database;
            }
            set {
                this._Database = value;
                this._validationDict["Database"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "SpTestFile" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string SpTestFile {
            get {
                return this._SpTestFile;
            }
            set {
                this._SpTestFile = value;
                this._validationDict["SpTestFile"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "ScriptLogFileName" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string ScriptLogFileName {
            get {
                return this._ScriptLogFileName;
            }
            set {
                this._ScriptLogFileName = value;
                this._validationDict["ScriptLogFileName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "RootLoggingPath" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string RootLoggingPath {
            get {
                return this._RootLoggingPath;
            }
            set {
                this._RootLoggingPath = value;
                this._validationDict["RootLoggingPath"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "LogAsText" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual bool LogAsText {
            get {
                return this._LogAsText;
            }
            set {
                this._LogAsText = value;
                this._validationDict["LogAsText"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "Trial" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual bool Trial {
            get {
                return this._Trial;
            }
            set {
                this._Trial = value;
                this._validationDict["Trial"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "ScriptSrcDir" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string ScriptSrcDir {
            get {
                return this._ScriptSrcDir;
            }
            set {
                this._ScriptSrcDir = value;
                this._validationDict["ScriptSrcDir"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "UserName" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string UserName {
            get {
                return this._UserName;
            }
            set {
                this._UserName = value;
                this._validationDict["UserName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "Password" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string Password {
            get {
                return this._Password;
            }
            set {
                this._Password = value;
                this._validationDict["Password"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "LogToDatabaseName" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string LogToDatabaseName {
            get {
                return this._LogToDatabaseName;
            }
            set {
                this._LogToDatabaseName = value;
                this._validationDict["LogToDatabaseName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "Description" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string Description {
            get {
                return this._Description;
            }
            set {
                this._Description = value;
                this._validationDict["Description"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "Transactional" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual bool Transactional {
            get {
                return this._Transactional;
            }
            set {
                this._Transactional = value;
                this._validationDict["Transactional"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "RemoteServers" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string RemoteServers {
            get {
                return this._RemoteServers;
            }
            set {
                this._RemoteServers = value;
                this._validationDict["RemoteServers"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "DistributionType" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual string DistributionType {
            get {
                return this._DistributionType;
            }
            set {
                this._DistributionType = value;
                this._validationDict["DistributionType"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "AllowableTimeoutRetries" data
        ///</summary>
        [System.Runtime.Serialization.DataMember()]
        public virtual int AllowableTimeoutRetries {
            get {
                return this._AllowableTimeoutRetries;
            }
            set {
                this._AllowableTimeoutRetries = value;
                this._validationDict["AllowableTimeoutRetries"] = true;
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "BuildDesignated" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringBuildDesignated {
            get {
                return this._BuildDesignated.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "BuildFileName" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringBuildFileName {
            get {
                if ((this._BuildFileName != null)) {
                    return this._BuildFileName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "AutoScriptDesignated" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringAutoScriptDesignated {
            get {
                return this._AutoScriptDesignated.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "AutoScriptFileName" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringAutoScriptFileName {
            get {
                if ((this._AutoScriptFileName != null)) {
                    return this._AutoScriptFileName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "OverrideDesignated" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringOverrideDesignated {
            get {
                return this._OverrideDesignated.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "MultiDbRunConfigFileName" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringMultiDbRunConfigFileName {
            get {
                if ((this._MultiDbRunConfigFileName != null)) {
                    return this._MultiDbRunConfigFileName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "ManualOverRideSets" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringManualOverRideSets {
            get {
                if ((this._ManualOverRideSets != null)) {
                    return this._ManualOverRideSets.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "Server" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringServer {
            get {
                if ((this._Server != null)) {
                    return this._Server.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "LogFileName" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringLogFileName {
            get {
                if ((this._LogFileName != null)) {
                    return this._LogFileName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "SprocTestDesignated" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringSprocTestDesignated {
            get {
                return this._SprocTestDesignated.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "Database" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringDatabase {
            get {
                if ((this._Database != null)) {
                    return this._Database.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "SpTestFile" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringSpTestFile {
            get {
                if ((this._SpTestFile != null)) {
                    return this._SpTestFile.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "ScriptLogFileName" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringScriptLogFileName {
            get {
                if ((this._ScriptLogFileName != null)) {
                    return this._ScriptLogFileName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "RootLoggingPath" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringRootLoggingPath {
            get {
                if ((this._RootLoggingPath != null)) {
                    return this._RootLoggingPath.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "LogAsText" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringLogAsText {
            get {
                return this._LogAsText.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "Trial" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringTrial {
            get {
                return this._Trial.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "ScriptSrcDir" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringScriptSrcDir {
            get {
                if ((this._ScriptSrcDir != null)) {
                    return this._ScriptSrcDir.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "UserName" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringUserName {
            get {
                if ((this._UserName != null)) {
                    return this._UserName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "Password" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringPassword {
            get {
                if ((this._Password != null)) {
                    return this._Password.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "LogToDatabaseName" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringLogToDatabaseName {
            get {
                if ((this._LogToDatabaseName != null)) {
                    return this._LogToDatabaseName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "Description" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringDescription {
            get {
                if ((this._Description != null)) {
                    return this._Description.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "Transactional" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringTransactional {
            get {
                return this._Transactional.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "RemoteServers" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringRemoteServers {
            get {
                if ((this._RemoteServers != null)) {
                    return this._RemoteServers.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "DistributionType" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringDistributionType {
            get {
                if ((this._DistributionType != null)) {
                    return this._DistributionType.ToString(System.Globalization.CultureInfo.CurrentCulture);
                }
                else {
                    return String.Empty;
                }
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "AllowableTimeoutRetries" data value
        ///If the underlying value is null, returns an empty string.
        ///<</summary>
        public virtual string StringAllowableTimeoutRetries {
            get {
                return this._AllowableTimeoutRetries.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a delimited string of the current data class property values
        ///</summary>
        /// <param name="delimiter">The delimiter string to use to create the delimited string</param>
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StringBuildDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringBuildFileName);
                sb.Append(delimiter);
                sb.Append(this.StringAutoScriptDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringAutoScriptFileName);
                sb.Append(delimiter);
                sb.Append(this.StringOverrideDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringMultiDbRunConfigFileName);
                sb.Append(delimiter);
                sb.Append(this.StringManualOverRideSets);
                sb.Append(delimiter);
                sb.Append(this.StringServer);
                sb.Append(delimiter);
                sb.Append(this.StringLogFileName);
                sb.Append(delimiter);
                sb.Append(this.StringSprocTestDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringDatabase);
                sb.Append(delimiter);
                sb.Append(this.StringSpTestFile);
                sb.Append(delimiter);
                sb.Append(this.StringScriptLogFileName);
                sb.Append(delimiter);
                sb.Append(this.StringRootLoggingPath);
                sb.Append(delimiter);
                sb.Append(this.StringLogAsText);
                sb.Append(delimiter);
                sb.Append(this.StringTrial);
                sb.Append(delimiter);
                sb.Append(this.StringScriptSrcDir);
                sb.Append(delimiter);
                sb.Append(this.StringUserName);
                sb.Append(delimiter);
                sb.Append(this.StringPassword);
                sb.Append(delimiter);
                sb.Append(this.StringLogToDatabaseName);
                sb.Append(delimiter);
                sb.Append(this.StringDescription);
                sb.Append(delimiter);
                sb.Append(this.StringTransactional);
                sb.Append(delimiter);
                sb.Append(this.StringRemoteServers);
                sb.Append(delimiter);
                sb.Append(this.StringDistributionType);
                sb.Append(delimiter);
                sb.Append(this.StringAllowableTimeoutRetries);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using matching data class object as a source. Simulates a "deep copy" action
        ///</summary>
        /// <param name="dataClass">A populated data class that you want to copy the data from</param>
        public virtual bool Fill(CommandLineArgs dataClass) {
            try {
                this.BuildDesignated = dataClass.BuildDesignated;
                this.BuildFileName = dataClass.BuildFileName;
                this.AutoScriptDesignated = dataClass.AutoScriptDesignated;
                this.AutoScriptFileName = dataClass.AutoScriptFileName;
                this.OverrideDesignated = dataClass.OverrideDesignated;
                this.MultiDbRunConfigFileName = dataClass.MultiDbRunConfigFileName;
                this.ManualOverRideSets = dataClass.ManualOverRideSets;
                this.Server = dataClass.Server;
                this.ArgumentCollection = dataClass.ArgumentCollection;
                this.RawArguments = dataClass.RawArguments;
                this.LogFileName = dataClass.LogFileName;
                this.SprocTestDesignated = dataClass.SprocTestDesignated;
                this.Database = dataClass.Database;
                this.SpTestFile = dataClass.SpTestFile;
                this.ScriptLogFileName = dataClass.ScriptLogFileName;
                this.RootLoggingPath = dataClass.RootLoggingPath;
                this.LogAsText = dataClass.LogAsText;
                this.Trial = dataClass.Trial;
                this.ScriptSrcDir = dataClass.ScriptSrcDir;
                this.UserName = dataClass.UserName;
                this.Password = dataClass.Password;
                this.LogToDatabaseName = dataClass.LogToDatabaseName;
                this.Description = dataClass.Description;
                this.Transactional = dataClass.Transactional;
                this.RemoteServers = dataClass.RemoteServers;
                this.DistributionType = dataClass.DistributionType;
                this.AllowableTimeoutRetries = dataClass.AllowableTimeoutRetries;
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.Fill(CommandLineArgs) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a IDataReader as a source.
        ///</summary>
        /// <param name="reader">The IDataReader object. This should be an open IDataReader with at least 1 row to read</param>
        /// <param name="closeReader">Use false to keep the IDataReader open if you need to fill more than one data class with the same IDataReader</param>
        public virtual bool Fill(System.Data.IDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    this.fillCount = fillCount + 1;
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader 
                            && (reader != null))) {
                    reader.Close();
                }
            }
        }
        
        /// <summary>
        ///Populates the data class using a DataRow object as a source.
        ///</summary>
        /// <param name="sourceDataRow">A DataRow with the matching columns for this data class</param>
        public virtual bool Fill(System.Data.DataRow sourceDataRow) {
            try {
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.Fill(System.Data.DataRow sourceDataRow) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a System.Collections.Specialized.NameValueCollection object as a source. Useful for populating via a web Request.QueryString
        ///</summary>
        /// <param name="collection">A System.Collections.Specialized.NameValueCollection with keys matching the data class</param>
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection collection) {
            try {
                if ((collection.GetValues("BuildDesignated") != null)) {
                    this.BuildDesignated = ((bool)(System.Convert.ChangeType(collection.GetValues("BuildDesignated")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("BuildFileName") != null)) {
                    this.BuildFileName = ((string)(System.Convert.ChangeType(collection.GetValues("BuildFileName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("AutoScriptDesignated") != null)) {
                    this.AutoScriptDesignated = ((bool)(System.Convert.ChangeType(collection.GetValues("AutoScriptDesignated")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("AutoScriptFileName") != null)) {
                    this.AutoScriptFileName = ((string)(System.Convert.ChangeType(collection.GetValues("AutoScriptFileName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("OverrideDesignated") != null)) {
                    this.OverrideDesignated = ((bool)(System.Convert.ChangeType(collection.GetValues("OverrideDesignated")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("MultiDbRunConfigFileName") != null)) {
                    this.MultiDbRunConfigFileName = ((string)(System.Convert.ChangeType(collection.GetValues("MultiDbRunConfigFileName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("ManualOverRideSets") != null)) {
                    this.ManualOverRideSets = ((string)(System.Convert.ChangeType(collection.GetValues("ManualOverRideSets")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("Server") != null)) {
                    this.Server = ((string)(System.Convert.ChangeType(collection.GetValues("Server")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("ArgumentCollection") != null)) {
                    this.ArgumentCollection = ((System.Collections.Specialized.StringDictionary)(System.Convert.ChangeType(collection.GetValues("ArgumentCollection")[0], typeof(System.Collections.Specialized.StringDictionary), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("RawArguments") != null)) {
                    this.RawArguments = ((string[])(System.Convert.ChangeType(collection.GetValues("RawArguments")[0], typeof(string[]), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("LogFileName") != null)) {
                    this.LogFileName = ((string)(System.Convert.ChangeType(collection.GetValues("LogFileName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("SprocTestDesignated") != null)) {
                    this.SprocTestDesignated = ((bool)(System.Convert.ChangeType(collection.GetValues("SprocTestDesignated")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("Database") != null)) {
                    this.Database = ((string)(System.Convert.ChangeType(collection.GetValues("Database")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("SpTestFile") != null)) {
                    this.SpTestFile = ((string)(System.Convert.ChangeType(collection.GetValues("SpTestFile")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("ScriptLogFileName") != null)) {
                    this.ScriptLogFileName = ((string)(System.Convert.ChangeType(collection.GetValues("ScriptLogFileName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("RootLoggingPath") != null)) {
                    this.RootLoggingPath = ((string)(System.Convert.ChangeType(collection.GetValues("RootLoggingPath")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("LogAsText") != null)) {
                    this.LogAsText = ((bool)(System.Convert.ChangeType(collection.GetValues("LogAsText")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("Trial") != null)) {
                    this.Trial = ((bool)(System.Convert.ChangeType(collection.GetValues("Trial")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("ScriptSrcDir") != null)) {
                    this.ScriptSrcDir = ((string)(System.Convert.ChangeType(collection.GetValues("ScriptSrcDir")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("UserName") != null)) {
                    this.UserName = ((string)(System.Convert.ChangeType(collection.GetValues("UserName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("Password") != null)) {
                    this.Password = ((string)(System.Convert.ChangeType(collection.GetValues("Password")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("LogToDatabaseName") != null)) {
                    this.LogToDatabaseName = ((string)(System.Convert.ChangeType(collection.GetValues("LogToDatabaseName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("Description") != null)) {
                    this.Description = ((string)(System.Convert.ChangeType(collection.GetValues("Description")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("Transactional") != null)) {
                    this.Transactional = ((bool)(System.Convert.ChangeType(collection.GetValues("Transactional")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("RemoteServers") != null)) {
                    this.RemoteServers = ((string)(System.Convert.ChangeType(collection.GetValues("RemoteServers")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("DistributionType") != null)) {
                    this.DistributionType = ((string)(System.Convert.ChangeType(collection.GetValues("DistributionType")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("AllowableTimeoutRetries") != null)) {
                    this.AllowableTimeoutRetries = ((int)(System.Convert.ChangeType(collection.GetValues("AllowableTimeoutRetries")[0], typeof(int), System.Globalization.CultureInfo.CurrentCulture)));
                }
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.Fill(collectionection) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a System.Array object as a source.
        ///</summary>
        /// <param name="sourceArray">A System.Array object with the matching ordered list of values as the data object</param>
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.BuildDesignated = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.BuildFileName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.AutoScriptDesignated = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(2), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.AutoScriptFileName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(3), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.OverrideDesignated = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(4), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.MultiDbRunConfigFileName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(5), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.ManualOverRideSets = ((string)(System.Convert.ChangeType(sourceArray.GetValue(6), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Server = ((string)(System.Convert.ChangeType(sourceArray.GetValue(7), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.ArgumentCollection = ((System.Collections.Specialized.StringDictionary)(System.Convert.ChangeType(sourceArray.GetValue(8), typeof(System.Collections.Specialized.StringDictionary), System.Globalization.CultureInfo.CurrentCulture)));
                this.RawArguments = ((string[])(System.Convert.ChangeType(sourceArray.GetValue(9), typeof(string[]), System.Globalization.CultureInfo.CurrentCulture)));
                this.LogFileName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(10), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.SprocTestDesignated = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(11), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.Database = ((string)(System.Convert.ChangeType(sourceArray.GetValue(12), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.SpTestFile = ((string)(System.Convert.ChangeType(sourceArray.GetValue(13), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.ScriptLogFileName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(14), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.RootLoggingPath = ((string)(System.Convert.ChangeType(sourceArray.GetValue(15), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.LogAsText = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(16), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.Trial = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(17), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.ScriptSrcDir = ((string)(System.Convert.ChangeType(sourceArray.GetValue(18), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.UserName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(19), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Password = ((string)(System.Convert.ChangeType(sourceArray.GetValue(20), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.LogToDatabaseName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(21), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Description = ((string)(System.Convert.ChangeType(sourceArray.GetValue(22), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Transactional = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(23), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.RemoteServers = ((string)(System.Convert.ChangeType(sourceArray.GetValue(24), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.DistributionType = ((string)(System.Convert.ChangeType(sourceArray.GetValue(25), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.AllowableTimeoutRetries = ((int)(System.Convert.ChangeType(sourceArray.GetValue(26), typeof(int), System.Globalization.CultureInfo.CurrentCulture)));
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.Fill(System.Array) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a delimited string as a source.
        ///</summary>
        /// <param name="delimitedValue">A delimited string with the matching ordered list of values as the data object</param>
        /// <param name="delimiter">The delimiter chararcter to use to 'split' the string</param>
        public virtual bool Fill(string delimitedValue, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimitedValue.Split(delimiter);
            try {
                this.BuildDesignated = ((bool)(System.Convert.ChangeType(arrSplitString[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.BuildFileName = ((string)(System.Convert.ChangeType(arrSplitString[1], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.AutoScriptDesignated = ((bool)(System.Convert.ChangeType(arrSplitString[2], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.AutoScriptFileName = ((string)(System.Convert.ChangeType(arrSplitString[3], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.OverrideDesignated = ((bool)(System.Convert.ChangeType(arrSplitString[4], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.MultiDbRunConfigFileName = ((string)(System.Convert.ChangeType(arrSplitString[5], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.ManualOverRideSets = ((string)(System.Convert.ChangeType(arrSplitString[6], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Server = ((string)(System.Convert.ChangeType(arrSplitString[7], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.ArgumentCollection = ((System.Collections.Specialized.StringDictionary)(System.Convert.ChangeType(arrSplitString[8], typeof(System.Collections.Specialized.StringDictionary), System.Globalization.CultureInfo.CurrentCulture)));
                this.RawArguments = ((string[])(System.Convert.ChangeType(arrSplitString[9], typeof(string[]), System.Globalization.CultureInfo.CurrentCulture)));
                this.LogFileName = ((string)(System.Convert.ChangeType(arrSplitString[10], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.SprocTestDesignated = ((bool)(System.Convert.ChangeType(arrSplitString[11], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.Database = ((string)(System.Convert.ChangeType(arrSplitString[12], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.SpTestFile = ((string)(System.Convert.ChangeType(arrSplitString[13], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.ScriptLogFileName = ((string)(System.Convert.ChangeType(arrSplitString[14], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.RootLoggingPath = ((string)(System.Convert.ChangeType(arrSplitString[15], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.LogAsText = ((bool)(System.Convert.ChangeType(arrSplitString[16], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.Trial = ((bool)(System.Convert.ChangeType(arrSplitString[17], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.ScriptSrcDir = ((string)(System.Convert.ChangeType(arrSplitString[18], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.UserName = ((string)(System.Convert.ChangeType(arrSplitString[19], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Password = ((string)(System.Convert.ChangeType(arrSplitString[20], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.LogToDatabaseName = ((string)(System.Convert.ChangeType(arrSplitString[21], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Description = ((string)(System.Convert.ChangeType(arrSplitString[22], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.Transactional = ((bool)(System.Convert.ChangeType(arrSplitString[23], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.RemoteServers = ((string)(System.Convert.ChangeType(arrSplitString[24], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.DistributionType = ((string)(System.Convert.ChangeType(arrSplitString[25], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.AllowableTimeoutRetries = ((int)(System.Convert.ChangeType(arrSplitString[26], typeof(int), System.Globalization.CultureInfo.CurrentCulture)));
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.Fill(string,char) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a fixed length string as a source.
        ///</summary>
        public virtual bool Fill(string fixedLength) {
            try {
                throw new System.NotImplementedException("The CommandLineArgs.Fill(string) method had not been implemented. No properties h" +
                        "ave a subStringLength value set");
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.Fill(string) Method", ex);
            }
        }
        
        /// <summary>
        ///Retrieves a delimited string of the current data class property values
        ///</summary>
        /// <param name="delimiter">The delimiter string to use to create the delimited string</param>
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StringBuildDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringBuildFileName);
                sb.Append(delimiter);
                sb.Append(this.StringAutoScriptDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringAutoScriptFileName);
                sb.Append(delimiter);
                sb.Append(this.StringOverrideDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringMultiDbRunConfigFileName);
                sb.Append(delimiter);
                sb.Append(this.StringManualOverRideSets);
                sb.Append(delimiter);
                sb.Append(this.StringServer);
                sb.Append(delimiter);
                sb.Append(delimiter);
                sb.Append(this.StringLogFileName);
                sb.Append(delimiter);
                sb.Append(this.StringSprocTestDesignated);
                sb.Append(delimiter);
                sb.Append(this.StringDatabase);
                sb.Append(delimiter);
                sb.Append(this.StringSpTestFile);
                sb.Append(delimiter);
                sb.Append(this.StringScriptLogFileName);
                sb.Append(delimiter);
                sb.Append(this.StringRootLoggingPath);
                sb.Append(delimiter);
                sb.Append(this.StringLogAsText);
                sb.Append(delimiter);
                sb.Append(this.StringTrial);
                sb.Append(delimiter);
                sb.Append(this.StringScriptSrcDir);
                sb.Append(delimiter);
                sb.Append(this.StringUserName);
                sb.Append(delimiter);
                sb.Append(this.StringPassword);
                sb.Append(delimiter);
                sb.Append(this.StringLogToDatabaseName);
                sb.Append(delimiter);
                sb.Append(this.StringDescription);
                sb.Append(delimiter);
                sb.Append(this.StringTransactional);
                sb.Append(delimiter);
                sb.Append(this.StringRemoteServers);
                sb.Append(delimiter);
                sb.Append(this.StringDistributionType);
                sb.Append(delimiter);
                sb.Append(this.StringAllowableTimeoutRetries);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.GetDelimitedString(string) Method", ex);
            }
        }
        
        /// <summary>
        ///Retrieves a System.String[] array of the current data class property values
        ///</summary>
        public virtual string[] GetStringArray() {
            string[] myArray = new string[27];
            try {
                myArray[0] = this.StringBuildDesignated;
                myArray[1] = this.StringBuildFileName;
                myArray[2] = this.StringAutoScriptDesignated;
                myArray[3] = this.StringAutoScriptFileName;
                myArray[4] = this.StringOverrideDesignated;
                myArray[5] = this.StringMultiDbRunConfigFileName;
                myArray[6] = this.StringManualOverRideSets;
                myArray[7] = this.StringServer;
                myArray[10] = this.StringLogFileName;
                myArray[11] = this.StringSprocTestDesignated;
                myArray[12] = this.StringDatabase;
                myArray[13] = this.StringSpTestFile;
                myArray[14] = this.StringScriptLogFileName;
                myArray[15] = this.StringRootLoggingPath;
                myArray[16] = this.StringLogAsText;
                myArray[17] = this.StringTrial;
                myArray[18] = this.StringScriptSrcDir;
                myArray[19] = this.StringUserName;
                myArray[20] = this.StringPassword;
                myArray[21] = this.StringLogToDatabaseName;
                myArray[22] = this.StringDescription;
                myArray[23] = this.StringTransactional;
                myArray[24] = this.StringRemoteServers;
                myArray[25] = this.StringDistributionType;
                myArray[26] = this.StringAllowableTimeoutRetries;
                return myArray;
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.GetStringArray() Method", ex);
            }
        }
        
        /// <summary>
        ///Retrieves a fixed length string of the current data class values
        ///</summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
        public virtual string GetFixedLengthString() {
            throw new System.NotImplementedException("GetFixedLengthString() method had not been implemented. No properties have a subS" +
                    "tringLength value set");
        }
        
        /// <summary>
        ///Retrieves a System.Collections.Specialized.NameValueCollection object populated with matching keys and values of the current data class
        ///</summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("BuildDesignated", this.StringBuildDesignated);
                nameValueColl.Add("BuildFileName", this.StringBuildFileName);
                nameValueColl.Add("AutoScriptDesignated", this.StringAutoScriptDesignated);
                nameValueColl.Add("AutoScriptFileName", this.StringAutoScriptFileName);
                nameValueColl.Add("OverrideDesignated", this.StringOverrideDesignated);
                nameValueColl.Add("MultiDbRunConfigFileName", this.StringMultiDbRunConfigFileName);
                nameValueColl.Add("ManualOverRideSets", this.StringManualOverRideSets);
                nameValueColl.Add("Server", this.StringServer);
                nameValueColl.Add("LogFileName", this.StringLogFileName);
                nameValueColl.Add("SprocTestDesignated", this.StringSprocTestDesignated);
                nameValueColl.Add("Database", this.StringDatabase);
                nameValueColl.Add("SpTestFile", this.StringSpTestFile);
                nameValueColl.Add("ScriptLogFileName", this.StringScriptLogFileName);
                nameValueColl.Add("RootLoggingPath", this.StringRootLoggingPath);
                nameValueColl.Add("LogAsText", this.StringLogAsText);
                nameValueColl.Add("Trial", this.StringTrial);
                nameValueColl.Add("ScriptSrcDir", this.StringScriptSrcDir);
                nameValueColl.Add("UserName", this.StringUserName);
                nameValueColl.Add("Password", this.StringPassword);
                nameValueColl.Add("LogToDatabaseName", this.StringLogToDatabaseName);
                nameValueColl.Add("Description", this.StringDescription);
                nameValueColl.Add("Transactional", this.StringTransactional);
                nameValueColl.Add("RemoteServers", this.StringRemoteServers);
                nameValueColl.Add("DistributionType", this.StringDistributionType);
                nameValueColl.Add("AllowableTimeoutRetries", this.StringAllowableTimeoutRetries);
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new CommandLineArgsException("Error in the Auto-Generated: CommandLineArgs.GetNameValueCollection() Method", ex);
            }
        }
        
        /// <summary>
        ///Returns an array of property names for properties that have not had their values set with non-Null values.
        ///**NOTE: Will return null if all property values have been set.
        ///</summary>
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["BuildDesignated"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("BuildDesignated");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["BuildFileName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("BuildFileName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["AutoScriptDesignated"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("AutoScriptDesignated");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["AutoScriptFileName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("AutoScriptFileName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["OverrideDesignated"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("OverrideDesignated");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["MultiDbRunConfigFileName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("MultiDbRunConfigFileName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ManualOverRideSets"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("ManualOverRideSets");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Server"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("Server");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ArgumentCollection"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("ArgumentCollection");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["RawArguments"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("RawArguments");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["LogFileName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("LogFileName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["SprocTestDesignated"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("SprocTestDesignated");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Database"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("Database");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["SpTestFile"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("SpTestFile");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ScriptLogFileName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("ScriptLogFileName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["RootLoggingPath"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("RootLoggingPath");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["LogAsText"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("LogAsText");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Trial"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("Trial");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["ScriptSrcDir"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("ScriptSrcDir");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["UserName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("UserName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Password"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("Password");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["LogToDatabaseName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("LogToDatabaseName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Description"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("Description");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["Transactional"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("Transactional");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["RemoteServers"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("RemoteServers");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["DistributionType"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("DistributionType");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["AllowableTimeoutRetries"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("AllowableTimeoutRetries");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
}
// -------------------------------------------------------------------------------------------------
// <autogenerated>
//    This code was generated by a the SimpleDataClassGenerator tool.
//    (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
//    <Version> 9.2.4.4 </Version>
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// <autogenerated>
// -------------------------------------------------------------------------------------------------
namespace SqlSync.SqlBuild {
    
    
    [System.Serializable()]
    public partial class CommandLineArgsException : System.Exception {
        
        public CommandLineArgsException() : 
                base() {
        }
        
        public CommandLineArgsException(string message) : 
                base(message) {
        }
        
        public CommandLineArgsException(string message, System.Exception innerException) : 
                base(message, innerException) {
        }
        
        protected CommandLineArgsException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
        }
    }
}
// -------------------------------------------------------------------------------------------------
// <autogenerated>
//    This code was generated by a the SimpleDataClassGenerator tool.
//    (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
//    <Version> 9.2.4.4 </Version>
//    Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// <autogenerated>
// -------------------------------------------------------------------------------------------------
namespace SqlSync.SqlBuild {
    
    
    public partial interface ICommandLineArgs {
        
        bool BuildDesignated {
            get;
            set;
        }
        
        string BuildFileName {
            get;
            set;
        }
        
        bool AutoScriptDesignated {
            get;
            set;
        }
        
        string AutoScriptFileName {
            get;
            set;
        }
        
        bool OverrideDesignated {
            get;
            set;
        }
        
        string MultiDbRunConfigFileName {
            get;
            set;
        }
        
        string ManualOverRideSets {
            get;
            set;
        }
        
        string Server {
            get;
            set;
        }
        
        System.Collections.Specialized.StringDictionary ArgumentCollection {
            get;
            set;
        }
        
        string[] RawArguments {
            get;
            set;
        }
        
        string LogFileName {
            get;
            set;
        }
        
        bool SprocTestDesignated {
            get;
            set;
        }
        
        string Database {
            get;
            set;
        }
        
        string SpTestFile {
            get;
            set;
        }
        
        string ScriptLogFileName {
            get;
            set;
        }
        
        string RootLoggingPath {
            get;
            set;
        }
        
        bool LogAsText {
            get;
            set;
        }
        
        bool Trial {
            get;
            set;
        }
        
        string ScriptSrcDir {
            get;
            set;
        }
        
        string UserName {
            get;
            set;
        }
        
        string Password {
            get;
            set;
        }
        
        string LogToDatabaseName {
            get;
            set;
        }
        
        string Description {
            get;
            set;
        }
        
        bool Transactional {
            get;
            set;
        }
        
        string RemoteServers {
            get;
            set;
        }
        
        string DistributionType {
            get;
            set;
        }
        
        int AllowableTimeoutRetries {
            get;
            set;
        }
    }
}
