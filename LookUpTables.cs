//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace SQLSync {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class SQLSyncData : DataSet {
        
        private DatabaseDataTable tableDatabase;
        
        private LookUpTableDataTable tableLookUpTable;
        
        private DataRelation relationDatabase_LookUpTable;
        
        public SQLSyncData() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected SQLSyncData(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Database"] != null)) {
                    this.Tables.Add(new DatabaseDataTable(ds.Tables["Database"]));
                }
                if ((ds.Tables["LookUpTable"] != null)) {
                    this.Tables.Add(new LookUpTableDataTable(ds.Tables["LookUpTable"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DatabaseDataTable Database {
            get {
                return this.tableDatabase;
            }
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LookUpTableDataTable LookUpTable {
            get {
                return this.tableLookUpTable;
            }
        }
        
        public override DataSet Clone() {
            SQLSyncData cln = ((SQLSyncData)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Database"] != null)) {
                this.Tables.Add(new DatabaseDataTable(ds.Tables["Database"]));
            }
            if ((ds.Tables["LookUpTable"] != null)) {
                this.Tables.Add(new LookUpTableDataTable(ds.Tables["LookUpTable"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDatabase = ((DatabaseDataTable)(this.Tables["Database"]));
            if ((this.tableDatabase != null)) {
                this.tableDatabase.InitVars();
            }
            this.tableLookUpTable = ((LookUpTableDataTable)(this.Tables["LookUpTable"]));
            if ((this.tableLookUpTable != null)) {
                this.tableLookUpTable.InitVars();
            }
            this.relationDatabase_LookUpTable = this.Relations["Database_LookUpTable"];
        }
        
        private void InitClass() {
            this.DataSetName = "SQLSyncData";
            this.Prefix = "";
            this.Namespace = "http://www.mckechney.com/LookUpTables.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableDatabase = new DatabaseDataTable();
            this.Tables.Add(this.tableDatabase);
            this.tableLookUpTable = new LookUpTableDataTable();
            this.Tables.Add(this.tableLookUpTable);
            ForeignKeyConstraint fkc;
            fkc = new ForeignKeyConstraint("Database_LookUpTable", new DataColumn[] {
                        this.tableDatabase.Database_IdColumn}, new DataColumn[] {
                        this.tableLookUpTable.Database_IdColumn});
            this.tableLookUpTable.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationDatabase_LookUpTable = new DataRelation("Database_LookUpTable", new DataColumn[] {
                        this.tableDatabase.Database_IdColumn}, new DataColumn[] {
                        this.tableLookUpTable.Database_IdColumn}, false);
            this.relationDatabase_LookUpTable.Nested = true;
            this.Relations.Add(this.relationDatabase_LookUpTable);
        }
        
        private bool ShouldSerializeDatabase() {
            return false;
        }
        
        private bool ShouldSerializeLookUpTable() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DatabaseRowChangeEventHandler(object sender, DatabaseRowChangeEvent e);
        
        public delegate void LookUpTableRowChangeEventHandler(object sender, LookUpTableRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DatabaseDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnDatabase_Id;
            
            internal DatabaseDataTable() : 
                    base("Database") {
                this.InitClass();
            }
            
            internal DatabaseDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn Database_IdColumn {
                get {
                    return this.columnDatabase_Id;
                }
            }
            
            public DatabaseRow this[int index] {
                get {
                    return ((DatabaseRow)(this.Rows[index]));
                }
            }
            
            public event DatabaseRowChangeEventHandler DatabaseRowChanged;
            
            public event DatabaseRowChangeEventHandler DatabaseRowChanging;
            
            public event DatabaseRowChangeEventHandler DatabaseRowDeleted;
            
            public event DatabaseRowChangeEventHandler DatabaseRowDeleting;
            
            public void AddDatabaseRow(DatabaseRow row) {
                this.Rows.Add(row);
            }
            
            public DatabaseRow AddDatabaseRow(string Name) {
                DatabaseRow rowDatabaseRow = ((DatabaseRow)(this.NewRow()));
                rowDatabaseRow.ItemArray = new object[] {
                        Name,
                        null};
                this.Rows.Add(rowDatabaseRow);
                return rowDatabaseRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DatabaseDataTable cln = ((DatabaseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DatabaseDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnDatabase_Id = this.Columns["Database_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnDatabase_Id = new DataColumn("Database_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDatabase_Id);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnDatabase_Id}, true));
                this.columnName.Namespace = "";
                this.columnDatabase_Id.AutoIncrement = true;
                this.columnDatabase_Id.AllowDBNull = false;
                this.columnDatabase_Id.Unique = true;
            }
            
            public DatabaseRow NewDatabaseRow() {
                return ((DatabaseRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DatabaseRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DatabaseRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DatabaseRowChanged != null)) {
                    this.DatabaseRowChanged(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DatabaseRowChanging != null)) {
                    this.DatabaseRowChanging(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DatabaseRowDeleted != null)) {
                    this.DatabaseRowDeleted(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DatabaseRowDeleting != null)) {
                    this.DatabaseRowDeleting(this, new DatabaseRowChangeEvent(((DatabaseRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDatabaseRow(DatabaseRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DatabaseRow : DataRow {
            
            private DatabaseDataTable tableDatabase;
            
            internal DatabaseRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDatabase = ((DatabaseDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableDatabase.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDatabase.NameColumn] = value;
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableDatabase.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableDatabase.NameColumn] = System.Convert.DBNull;
            }
            
            public LookUpTableRow[] GetLookUpTableRows() {
                return ((LookUpTableRow[])(this.GetChildRows(this.Table.ChildRelations["Database_LookUpTable"])));
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DatabaseRowChangeEvent : EventArgs {
            
            private DatabaseRow eventRow;
            
            private DataRowAction eventAction;
            
            public DatabaseRowChangeEvent(DatabaseRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DatabaseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LookUpTableDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnName;
            
            private DataColumn columnWhereClause;
            
            private DataColumn columnUseAsFullSelect;
            
            private DataColumn columnDatabase_Id;
            
            internal LookUpTableDataTable() : 
                    base("LookUpTable") {
                this.InitClass();
            }
            
            internal LookUpTableDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            internal DataColumn WhereClauseColumn {
                get {
                    return this.columnWhereClause;
                }
            }
            
            internal DataColumn UseAsFullSelectColumn {
                get {
                    return this.columnUseAsFullSelect;
                }
            }
            
            internal DataColumn Database_IdColumn {
                get {
                    return this.columnDatabase_Id;
                }
            }
            
            public LookUpTableRow this[int index] {
                get {
                    return ((LookUpTableRow)(this.Rows[index]));
                }
            }
            
            public event LookUpTableRowChangeEventHandler LookUpTableRowChanged;
            
            public event LookUpTableRowChangeEventHandler LookUpTableRowChanging;
            
            public event LookUpTableRowChangeEventHandler LookUpTableRowDeleted;
            
            public event LookUpTableRowChangeEventHandler LookUpTableRowDeleting;
            
            public void AddLookUpTableRow(LookUpTableRow row) {
                this.Rows.Add(row);
            }
            
            public LookUpTableRow AddLookUpTableRow(string Name, string WhereClause, bool UseAsFullSelect, DatabaseRow parentDatabaseRowByDatabase_LookUpTable) {
                LookUpTableRow rowLookUpTableRow = ((LookUpTableRow)(this.NewRow()));
                rowLookUpTableRow.ItemArray = new object[] {
                        Name,
                        WhereClause,
                        UseAsFullSelect,
                        parentDatabaseRowByDatabase_LookUpTable[1]};
                this.Rows.Add(rowLookUpTableRow);
                return rowLookUpTableRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                LookUpTableDataTable cln = ((LookUpTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new LookUpTableDataTable();
            }
            
            internal void InitVars() {
                this.columnName = this.Columns["Name"];
                this.columnWhereClause = this.Columns["WhereClause"];
                this.columnUseAsFullSelect = this.Columns["UseAsFullSelect"];
                this.columnDatabase_Id = this.Columns["Database_Id"];
            }
            
            private void InitClass() {
                this.columnName = new DataColumn("Name", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnName);
                this.columnWhereClause = new DataColumn("WhereClause", typeof(string), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnWhereClause);
                this.columnUseAsFullSelect = new DataColumn("UseAsFullSelect", typeof(bool), null, System.Data.MappingType.Attribute);
                this.Columns.Add(this.columnUseAsFullSelect);
                this.columnDatabase_Id = new DataColumn("Database_Id", typeof(int), null, System.Data.MappingType.Hidden);
                this.Columns.Add(this.columnDatabase_Id);
                this.columnName.Namespace = "";
                this.columnWhereClause.Namespace = "";
                this.columnUseAsFullSelect.Namespace = "";
                this.columnUseAsFullSelect.DefaultValue = false;
            }
            
            public LookUpTableRow NewLookUpTableRow() {
                return ((LookUpTableRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new LookUpTableRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(LookUpTableRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LookUpTableRowChanged != null)) {
                    this.LookUpTableRowChanged(this, new LookUpTableRowChangeEvent(((LookUpTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LookUpTableRowChanging != null)) {
                    this.LookUpTableRowChanging(this, new LookUpTableRowChangeEvent(((LookUpTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LookUpTableRowDeleted != null)) {
                    this.LookUpTableRowDeleted(this, new LookUpTableRowChangeEvent(((LookUpTableRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LookUpTableRowDeleting != null)) {
                    this.LookUpTableRowDeleting(this, new LookUpTableRowChangeEvent(((LookUpTableRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveLookUpTableRow(LookUpTableRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LookUpTableRow : DataRow {
            
            private LookUpTableDataTable tableLookUpTable;
            
            internal LookUpTableRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableLookUpTable = ((LookUpTableDataTable)(this.Table));
            }
            
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableLookUpTable.NameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLookUpTable.NameColumn] = value;
                }
            }
            
            public string WhereClause {
                get {
                    if (this.IsWhereClauseNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableLookUpTable.WhereClauseColumn]));
                    }
                }
                set {
                    this[this.tableLookUpTable.WhereClauseColumn] = value;
                }
            }
            
            public bool UseAsFullSelect {
                get {
                    if (this.IsUseAsFullSelectNull()) {
                        return false;
                    }
                    else {
                        return ((bool)(this[this.tableLookUpTable.UseAsFullSelectColumn]));
                    }
                }
                set {
                    this[this.tableLookUpTable.UseAsFullSelectColumn] = value;
                }
            }
            
            public DatabaseRow DatabaseRow {
                get {
                    return ((DatabaseRow)(this.GetParentRow(this.Table.ParentRelations["Database_LookUpTable"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["Database_LookUpTable"]);
                }
            }
            
            public bool IsNameNull() {
                return this.IsNull(this.tableLookUpTable.NameColumn);
            }
            
            public void SetNameNull() {
                this[this.tableLookUpTable.NameColumn] = System.Convert.DBNull;
            }
            
            public bool IsWhereClauseNull() {
                return this.IsNull(this.tableLookUpTable.WhereClauseColumn);
            }
            
            public void SetWhereClauseNull() {
                this[this.tableLookUpTable.WhereClauseColumn] = System.Convert.DBNull;
            }
            
            public bool IsUseAsFullSelectNull() {
                return this.IsNull(this.tableLookUpTable.UseAsFullSelectColumn);
            }
            
            public void SetUseAsFullSelectNull() {
                this[this.tableLookUpTable.UseAsFullSelectColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class LookUpTableRowChangeEvent : EventArgs {
            
            private LookUpTableRow eventRow;
            
            private DataRowAction eventAction;
            
            public LookUpTableRowChangeEvent(LookUpTableRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public LookUpTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
