// ------------------------------------------------------------------------------
// <autogenerated>
//      This code was generated by a the SimpleDataClassGenerator tool.
//      (SimpleDataClassVSGenerator.dll  -- Michael McKechney, author)
// 		<Version> 8.4.3.0 </Version>
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
// <autogenerated>
// ------------------------------------------------------------------------------
namespace SqlSync.TableScript.Audit {
    using System;
    using System.Globalization;
    
    
    [Serializable()]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DesignTimeVisible(true)]
    public partial class AuditAutoDetectData : IAuditInfo {
        
        private string _TableName = string.Empty;
        
        private int _RowCount = 0;
        
        private bool _HasAuditTable = false;
        
        private bool _HasAuditUpdateTrigger = false;
        
        private bool _HasAuditInsertTrigger = false;
        
        private bool _HasAuditDeleteTrigger = false;
        
        private int fillCount;
        
        private System.Collections.Hashtable _validationDict;
        
        public AuditAutoDetectData() {
            this._validationDict = new System.Collections.Hashtable();
            this._validationDict.Add("TableName", false);
            this._validationDict.Add("RowCount", false);
            this._validationDict.Add("HasAuditTable", false);
            this._validationDict.Add("HasAuditUpdateTrigger", false);
            this._validationDict.Add("HasAuditInsertTrigger", false);
            this._validationDict.Add("HasAuditDeleteTrigger", false);
        }
        
        /// <summary>
        ///Reflects how many times a "Fill" method had been successfully called on the object:
        ///0 = Fill has never been called;
        ///1 = Fill has been successful;
        ///Greater then 1 means Fill has been called more than once and you may have overwritten data.
        ///</summary>
        public virtual int FillCount {
            get {
                return this.fillCount;
            }
        }
        
        /// <summary>
        ///Will return true if all data fields have been set with non-Null values
        ///</summary>
        public virtual bool IsValid {
            get {
                if ((this.Validate() == null)) {
                    return true;
                }
                else {
                    return false;
                }
            }
        }
        
        /// <summary>
        ///Storage property for "TableName" data
        ///</summary>
        public virtual string TableName {
            get {
                return this._TableName;
            }
            set {
                this._TableName = value;
                this._validationDict["TableName"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "RowCount" data
        ///</summary>
        public virtual int RowCount {
            get {
                return this._RowCount;
            }
            set {
                this._RowCount = value;
                this._validationDict["RowCount"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "HasAuditTable" data
        ///</summary>
        public virtual bool HasAuditTable {
            get {
                return this._HasAuditTable;
            }
            set {
                this._HasAuditTable = value;
                this._validationDict["HasAuditTable"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "HasAuditUpdateTrigger" data
        ///</summary>
        public virtual bool HasAuditUpdateTrigger {
            get {
                return this._HasAuditUpdateTrigger;
            }
            set {
                this._HasAuditUpdateTrigger = value;
                this._validationDict["HasAuditUpdateTrigger"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "HasAuditInsertTrigger" data
        ///</summary>
        public virtual bool HasAuditInsertTrigger {
            get {
                return this._HasAuditInsertTrigger;
            }
            set {
                this._HasAuditInsertTrigger = value;
                this._validationDict["HasAuditInsertTrigger"] = true;
            }
        }
        
        /// <summary>
        ///Storage property for "HasAuditDeleteTrigger" data
        ///</summary>
        public virtual bool HasAuditDeleteTrigger {
            get {
                return this._HasAuditDeleteTrigger;
            }
            set {
                this._HasAuditDeleteTrigger = value;
                this._validationDict["HasAuditDeleteTrigger"] = true;
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "TableName" data value
        ///</summary>
        public virtual string StringTableName {
            get {
                return this._TableName.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "RowCount" data value
        ///</summary>
        public virtual string StringRowCount {
            get {
                return this._RowCount.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "HasAuditTable" data value
        ///</summary>
        public virtual string StringHasAuditTable {
            get {
                return this._HasAuditTable.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "HasAuditUpdateTrigger" data value
        ///</summary>
        public virtual string StringHasAuditUpdateTrigger {
            get {
                return this._HasAuditUpdateTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "HasAuditInsertTrigger" data value
        ///</summary>
        public virtual string StringHasAuditInsertTrigger {
            get {
                return this._HasAuditInsertTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a .ToString(System.Globalization.CultureInfo.CurrentCulture) value for the "HasAuditDeleteTrigger" data value
        ///</summary>
        public virtual string StringHasAuditDeleteTrigger {
            get {
                return this._HasAuditDeleteTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        /// <summary>
        ///Retrieves a delimited string of the current data class property values
        ///</summary>
        /// <param name="delimiter">The delimiter string to use to create the delimited string</param>
        public virtual string GetCustomDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.StringTableName);
                sb.Append(delimiter);
                sb.Append(this.StringRowCount);
                sb.Append(delimiter);
                sb.Append(this.StringHasAuditTable);
                sb.Append(delimiter);
                sb.Append(this.StringHasAuditUpdateTrigger);
                sb.Append(delimiter);
                sb.Append(this.StringHasAuditInsertTrigger);
                sb.Append(delimiter);
                sb.Append(this.StringHasAuditDeleteTrigger);
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.GetCustomDelimitedString(string) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using matching data class object as a source. Simulates a "deep copy" action
        ///</summary>
        /// <param name="dataClass">A populated data class that you want to copy the data from</param>
        public virtual bool Fill(AuditAutoDetectData dataClass) {
            try {
                this.TableName = dataClass.TableName;
                this.RowCount = dataClass.RowCount;
                this.HasAuditTable = dataClass.HasAuditTable;
                this.HasAuditUpdateTrigger = dataClass.HasAuditUpdateTrigger;
                this.HasAuditInsertTrigger = dataClass.HasAuditInsertTrigger;
                this.HasAuditDeleteTrigger = dataClass.HasAuditDeleteTrigger;
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.Fill(AuditAutoDetectData) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a DbDataReader as a source.
        ///</summary>
        /// <param name="reader">The DbDataReader object. This should be an open DbDataReader with at least 1 row to read</param>
        /// <param name="closeReader">Use false to keep the DbDataReader open if you need to fill more than one data class with the same DbDataReader</param>
        public virtual bool Fill(System.Data.Common.DbDataReader reader, bool closeReader) {
            try {
                if ((reader.Read() == false)) {
                    reader.Close();
                    return false;
                }
                else {
                    this.fillCount = fillCount + 1;
                    return true;
                }
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.Fill(SqlDataReader) Method", ex);
            }
            finally {
                if ((closeReader == true)) {
                    reader.Close();
                }
            }
        }
        
        /// <summary>
        ///Populates the data class using a DataRow object as a source.
        ///</summary>
        /// <param name="sourceDataRow">A DataRow with the matching columns for this data class</param>
        public virtual bool Fill(System.Data.DataRow sourceDataRow) {
            try {
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.Fill(System.Data.DataRow sourceDataRow) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a System.Collections.Specialized.NameValueCollection object as a source. Useful for populating via a web Request.QueryString
        ///</summary>
        /// <param name="collection">A System.Collections.Specialized.NameValueCollection with keys matching the data class</param>
        public virtual bool Fill(System.Collections.Specialized.NameValueCollection collection) {
            try {
                if ((collection.GetValues("TableName") != null)) {
                    this.TableName = ((string)(System.Convert.ChangeType(collection.GetValues("TableName")[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("RowCount") != null)) {
                    this.RowCount = ((int)(System.Convert.ChangeType(collection.GetValues("RowCount")[0], typeof(int), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("HasAuditTable") != null)) {
                    this.HasAuditTable = ((bool)(System.Convert.ChangeType(collection.GetValues("HasAuditTable")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("HasAuditUpdateTrigger") != null)) {
                    this.HasAuditUpdateTrigger = ((bool)(System.Convert.ChangeType(collection.GetValues("HasAuditUpdateTrigger")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("HasAuditInsertTrigger") != null)) {
                    this.HasAuditInsertTrigger = ((bool)(System.Convert.ChangeType(collection.GetValues("HasAuditInsertTrigger")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                if ((collection.GetValues("HasAuditDeleteTrigger") != null)) {
                    this.HasAuditDeleteTrigger = ((bool)(System.Convert.ChangeType(collection.GetValues("HasAuditDeleteTrigger")[0], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                }
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.Fill(collectionection) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a System.Array object as a source.
        ///</summary>
        /// <param name="sourceArray">A System.Array object with the matching ordered list of values as the data object</param>
        public virtual bool Fill(System.Array sourceArray) {
            try {
                this.TableName = ((string)(System.Convert.ChangeType(sourceArray.GetValue(0), typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.RowCount = ((int)(System.Convert.ChangeType(sourceArray.GetValue(1), typeof(int), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditTable = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(2), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditUpdateTrigger = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(3), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditInsertTrigger = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(4), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditDeleteTrigger = ((bool)(System.Convert.ChangeType(sourceArray.GetValue(5), typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.Fill(System.Array) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a delimited string as a source.
        ///</summary>
        /// <param name="delimitedValue">A delimited string with the matching ordered list of values as the data object</param>
        /// <param name="delimiter">The delimiter chararcter to use to 'split' the string</param>
        public virtual bool Fill(string delimitedValue, char delimiter) {
            string[] arrSplitString;
            arrSplitString = delimitedValue.Split(delimiter);
            try {
                this.TableName = ((string)(System.Convert.ChangeType(arrSplitString[0], typeof(string), System.Globalization.CultureInfo.CurrentCulture)));
                this.RowCount = ((int)(System.Convert.ChangeType(arrSplitString[1], typeof(int), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditTable = ((bool)(System.Convert.ChangeType(arrSplitString[2], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditUpdateTrigger = ((bool)(System.Convert.ChangeType(arrSplitString[3], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditInsertTrigger = ((bool)(System.Convert.ChangeType(arrSplitString[4], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.HasAuditDeleteTrigger = ((bool)(System.Convert.ChangeType(arrSplitString[5], typeof(bool), System.Globalization.CultureInfo.CurrentCulture)));
                this.fillCount = fillCount + 1;
                return true;
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.Fill(string,char) Method", ex);
            }
        }
        
        /// <summary>
        ///Populates the data class using a fixed length string as a source.
        ///</summary>
        public virtual bool Fill(string fixedLength) {
            try {
                throw new System.NotImplementedException("The AuditAutoDetectData.Fill(string) method had not been implemented. No properti" +
                        "es have a subStringLength value set");
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.Fill(string) Method", ex);
            }
        }
        
        /// <summary>
        ///Retrieves a delimited string of the current data class property values
        ///</summary>
        /// <param name="delimiter">The delimiter string to use to create the delimited string</param>
        public virtual string GetDelimitedString(string delimiter) {
            System.Text.StringBuilder sb = new System.Text.StringBuilder();
            try {
                sb.Append(this.TableName.ToString(System.Globalization.CultureInfo.CurrentCulture));
                sb.Append(delimiter);
                sb.Append(this.RowCount.ToString(System.Globalization.CultureInfo.CurrentCulture));
                sb.Append(delimiter);
                sb.Append(this.HasAuditTable.ToString(System.Globalization.CultureInfo.CurrentCulture));
                sb.Append(delimiter);
                sb.Append(this.HasAuditUpdateTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture));
                sb.Append(delimiter);
                sb.Append(this.HasAuditInsertTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture));
                sb.Append(delimiter);
                sb.Append(this.HasAuditDeleteTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture));
                return sb.ToString();
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.GetDelimitedString(string) Method", ex);
            }
        }
        
        /// <summary>
        ///Retrieves a System.String[] array of the current data class property values
        ///</summary>
        public virtual string[] GetStringArray() {
            string[] myArray = new string[6];
            try {
                myArray[0] = this._TableName.ToString(System.Globalization.CultureInfo.CurrentCulture);
                myArray[1] = this._RowCount.ToString(System.Globalization.CultureInfo.CurrentCulture);
                myArray[2] = this._HasAuditTable.ToString(System.Globalization.CultureInfo.CurrentCulture);
                myArray[3] = this._HasAuditUpdateTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture);
                myArray[4] = this._HasAuditInsertTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture);
                myArray[5] = this._HasAuditDeleteTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture);
                return myArray;
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.GetStringArray() Method", ex);
            }
        }
        
        /// <summary>
        ///Retrieves a fixed length string of the current data class values
        ///</summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
        public virtual string GetFixedLengthString() {
            throw new System.NotImplementedException("GetFixedLengthString() method had not been implemented. No properties have a subS" +
                    "tringLength value set");
        }
        
        /// <summary>
        ///Retrieves a System.Collections.Specialized.NameValueCollection object populated with matching keys and values of the current data class
        ///</summary>
        [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]
        public virtual System.Collections.Specialized.NameValueCollection GetNameValueCollection() {
            System.Collections.Specialized.NameValueCollection nameValueColl = new System.Collections.Specialized.NameValueCollection();
            try {
                nameValueColl.Add("TableName", this.TableName.ToString(System.Globalization.CultureInfo.CurrentCulture));
                nameValueColl.Add("RowCount", this.RowCount.ToString(System.Globalization.CultureInfo.CurrentCulture));
                nameValueColl.Add("HasAuditTable", this.HasAuditTable.ToString(System.Globalization.CultureInfo.CurrentCulture));
                nameValueColl.Add("HasAuditUpdateTrigger", this.HasAuditUpdateTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture));
                nameValueColl.Add("HasAuditInsertTrigger", this.HasAuditInsertTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture));
                nameValueColl.Add("HasAuditDeleteTrigger", this.HasAuditDeleteTrigger.ToString(System.Globalization.CultureInfo.CurrentCulture));
                return nameValueColl;
            }
            catch (System.Exception ex) {
                throw new AuditAutoDetectDataException("Error in the Auto-Generated: AuditAutoDetectData.GetNameValueCollection() Method", ex);
            }
        }
        
        /// <summary>
        ///Returns an array of property names for properties that have not had their values set with non-Null values.
        ///**NOTE: Will return null if all property values have been set.
        ///</summary>
        public virtual string[] Validate() {
            System.Collections.ArrayList missingValues = new System.Collections.ArrayList();
            if ((((bool)(System.Convert.ChangeType(this._validationDict["TableName"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("TableName");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["RowCount"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("RowCount");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["HasAuditTable"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("HasAuditTable");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["HasAuditUpdateTrigger"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("HasAuditUpdateTrigger");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["HasAuditInsertTrigger"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("HasAuditInsertTrigger");
            }
            if ((((bool)(System.Convert.ChangeType(this._validationDict["HasAuditDeleteTrigger"], typeof(bool), System.Globalization.CultureInfo.CurrentCulture))) == false)) {
                missingValues.Add("HasAuditDeleteTrigger");
            }
            if ((missingValues.Count > 0)) {
                string[] missingVals = new string[missingValues.Count];
                missingValues.CopyTo(missingVals);
                return missingVals;
            }
            else {
                return null;
            }
        }
    }
    
    [Serializable()]
    public partial class AuditAutoDetectDataException : System.Exception {
        
        public AuditAutoDetectDataException() : 
                base() {
        }
        
        public AuditAutoDetectDataException(string message) : 
                base(message) {
        }
        
        public AuditAutoDetectDataException(string message, System.Exception innerException) : 
                base(message, innerException) {
        }
        
        protected AuditAutoDetectDataException(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
        }
    }
}
