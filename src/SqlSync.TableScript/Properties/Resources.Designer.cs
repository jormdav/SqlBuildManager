//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SqlSync.TableScript.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SqlSync.TableScript.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = &apos;&lt;&lt;Audit Table Name&gt;&gt;&apos; AND TABLE_SCHEMA = &apos;&lt;&lt;schema&gt;&gt;&apos; AND COLUMN_NAME = &apos;&lt;&lt;Column Name&gt;&gt;&apos; AND CHARACTER_MAXIMUM_LENGTH = &lt;&lt;Char Length&gt;&gt;) OR
        ///	NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = &apos;&lt;&lt;Table Name&gt;&gt;&apos; AND TABLE_SCHEMA = &apos;&lt;&lt;schema&gt;&gt;&apos; AND COLUMN_NAME = &apos;&lt;&lt;Column Name&gt;&gt;&apos; AND CHARACTER_MAXIMUM_LENGTH = &lt;&lt;Char Length&gt;&gt;)
        ///BEGIN
        ///	DECLARE @length int
        ///	SELECT @length = CHARACTER_MAXIMUM_LENGTH FROM INFORMATION_ [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditColumnCharSize {
            get {
                return ResourceManager.GetString("AuditColumnCharSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME = &apos;&lt;&lt;Audit Table Name&gt;&gt;&apos; AND TABLE_SCHEMA = &apos;&lt;&lt;schema&gt;&gt;&apos; AND COLUMN_NAME = &apos;&lt;&lt;Column Name&gt;&gt;&apos;)
        ///BEGIN
        ///	ALTER TABLE [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Audit Table Name&gt;&gt;] ADD [&lt;&lt;Column Name&gt;&gt;] [&lt;&lt;Column Type&gt;&gt;] &lt;&lt;Char Length&gt;&gt;
        ///	Print &apos;&lt;&lt;schema&gt;&gt;.&lt;&lt;Audit Table Name&gt;&gt; :: Added Column &lt;&lt;Column Name&gt;&gt; [&lt;&lt;Column Type&gt;&gt;] &lt;&lt;Char Length&gt;&gt;&apos;
        ///END
        ///GO
        ///
        ///.
        /// </summary>
        internal static string AuditColumnCreate {
            get {
                return ResourceManager.GetString("AuditColumnCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N&apos;[&lt;&lt;schema&gt;&gt;].[&lt;&lt;Trigger Name&gt;&gt;]&apos;))
        ///BEGIN
        ///
        ///	EXEC dbo.sp_executesql @statement = N&apos;ALTER TRIGGER [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Trigger Name&gt;&gt;] ON [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Table Name&gt;&gt;] FOR DELETE
        ///	AS
        ///	BEGIN
        ///		DECLARE @count int
        ///		SELECT @count = count(*) FROM deleted
        ///	
        ///		-- Insert the values of the deleted row into the audit table
        ///		INSERT INTO [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Audit Table Name&gt;&gt;] ([ModifyType],[RowsAffected],&lt;&lt;Column List&gt;&gt;) 
        ///			SELECT &apos;&apos;DELETE&apos;&apos;,@count, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditDeleteTrigger {
            get {
                return ResourceManager.GetString("AuditDeleteTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT name FROM sys.objects WHERE name = &apos;&lt;&lt;Trigger Name&gt;&gt;&apos; AND type = &apos;TR&apos;)
        ///	DROP TRIGGER &lt;&lt;Trigger Name&gt;&gt;
        ///	Print &apos;&lt;&lt;Trigger Name&gt;&gt; :: Dropped&apos;
        ///GO
        ///
        ///CREATE TRIGGER &lt;&lt;Trigger Name&gt;&gt; ON &lt;&lt;Table Name&gt;&gt; FOR DELETE
        ///AS
        ///BEGIN
        ///	DECLARE @TrxId uniqueidentifier
        ///	SET @TrxId = newid()
        ///
        ///	DECLARE @count int
        ///	SELECT @count = count(*) FROM deleted
        ///	
        ///	DECLARE @DeletedBy as varchar(50)
        ///	SELECT @DeletedBy = (SELECT convert(int,convert(varbinary(4),context_info)) 
        ///			FROM master.dbo.sysprocesses WHE [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditDeleteTriggerDS {
            get {
                return ResourceManager.GetString("AuditDeleteTriggerDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT 1 FROM sys.objects WHERE name = &apos;&lt;&lt;Trigger Name&gt;&gt;&apos; AND type = &apos;TR&apos;)
        ///BEGIN
        ///	ALTER TABLE [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Table Name&gt;&gt;] DISABLE TRIGGER &lt;&lt;Trigger Name&gt;&gt;
        ///		Print &apos;&lt;&lt;Trigger Name&gt;&gt; :: Disabled&apos;
        ///END
        ///GO
        ///.
        /// </summary>
        internal static string AuditDisableTrigger {
            get {
                return ResourceManager.GetString("AuditDisableTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT 1 FROM sys.objects WHERE name = &apos;&lt;&lt;Trigger Name&gt;&gt;&apos; AND type = &apos;TR&apos;)
        ///BEGIN
        ///	ALTER TABLE [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Table Name&gt;&gt;] ENABLE TRIGGER &lt;&lt;Trigger Name&gt;&gt;
        ///	Print &apos;&lt;&lt;Trigger Name&gt;&gt; :: Enabled&apos;
        ///END
        ///GO
        ///.
        /// </summary>
        internal static string AuditEnableTrigger {
            get {
                return ResourceManager.GetString("AuditEnableTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N&apos;[&lt;&lt;schema&gt;&gt;].[&lt;&lt;Trigger Name&gt;&gt;]&apos;))
        ///BEGIN
        ///
        ///	EXEC dbo.sp_executesql @statement = N&apos;ALTER TRIGGER [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Trigger Name&gt;&gt;] ON [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Table Name&gt;&gt;] FOR INSERT
        ///	AS
        ///	BEGIN
        ///		DECLARE @count int
        ///		SELECT @count = count(*) FROM inserted
        ///	
        ///		-- Insert the values of the deleted row into the audit table
        ///		INSERT INTO [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Audit Table Name&gt;&gt;] ([ModifyType],[RowsAffected],&lt;&lt;Column List&gt;&gt;)
        ///			SELECT &apos;&apos;INSERT&apos;&apos;,@count, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditInsertTrigger {
            get {
                return ResourceManager.GetString("AuditInsertTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT name FROM sys.objects WHERE name = &apos;&lt;&lt;Trigger Name&gt;&gt;&apos; AND type = &apos;TR&apos;)
        ///	DROP TRIGGER &lt;&lt;Trigger Name&gt;&gt;
        ///	Print &apos;&lt;&lt;Trigger Name&gt;&gt; :: Dropped&apos;
        ///GO
        ///
        ///CREATE TRIGGER &lt;&lt;Trigger Name&gt;&gt; ON &lt;&lt;Table Name&gt;&gt; FOR INSERT
        ///AS
        ///BEGIN
        ///	DECLARE @TrxId uniqueidentifier
        ///	SET @TrxId = newid()
        ///	
        ///	DECLARE @count int
        ///	SELECT @count = count(*) FROM inserted
        ///	
        ///	DECLARE @InsertedBy int, @IndividualID int, @ObjectType int
        ///	SELECT @InsertedBy = &lt;&lt;InsertByColumn&gt;&gt;,  @IndividualID = &lt;&lt;IndividualIDColumn&gt;&gt;, @Ob [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditInsertTriggerDS {
            get {
                return ResourceManager.GetString("AuditInsertTriggerDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.Tables WHERE TABLE_NAME = &apos;&lt;&lt;Audit Table Name&gt;&gt;&apos;  AND TABLE_SCHEMA = &apos;&lt;&lt;schema&gt;&gt;&apos; AND TABLE_TYPE = &apos;BASE TABLE&apos;)
        ///BEGIN
        ///	CREATE TABLE [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Audit Table Name&gt;&gt;](
        ///		[&lt;&lt;Audit Table Name&gt;&gt;ID] [bigint] IDENTITY(1,1) NOT NULL,
        ///		[ModifiedBy] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF_&lt;&lt;Audit Table Name&gt;&gt;_ModifiedBy]  DEFAULT (suser_sname()),
        ///		[ModifiedDate] datetime NOT NULL CONSTRAINT [DF_&lt;&lt;Audit Table Name&gt;&gt;_ModifiedDa [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditTableCreate {
            get {
                return ResourceManager.GetString("AuditTableCreate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.Tables WHERE TABLE_NAME = &apos;AuditTransactionMaster&apos; AND TABLE_SCHEMA = &apos;dbo&apos; AND TABLE_TYPE = &apos;BASE TABLE&apos;)
        ///BEGIN
        ///	CREATE TABLE dbo.AuditTransactionMaster(
        ///		TransId uniqueidentifier NOT NULL ,
        ///		TableName [varchar](128) NOT NULL,
        ///		ModifiedBy [varchar](50) NOT NULL DEFAULT SYSTEM_USER,
        ///		ModifiedDate datetime NOT NULL DEFAULT getdate(),
        ///		ModifyType [varchar](50) NOT NULL,
        ///		RowsAffected [int] NOT NULL,
        ///		WorkStation [varchar](128) NOT NULL DEFAULT HOS [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditTrxMaster {
            get {
                return ResourceManager.GetString("AuditTrxMaster", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS(SELECT 1 FROM INFORMATION_SCHEMA.Tables WHERE TABLE_NAME = &apos;AuditTransactionMaster&apos; AND TABLE_TYPE = &apos;BASE TABLE&apos;)
        ///BEGIN
        ///	CREATE TABLE AuditTransactionMaster(
        ///		TransId uniqueidentifier NOT NULL ,
        ///		TableName [varchar](128) NOT NULL,
        ///		ModifiedBy [varchar](50) NOT NULL DEFAULT SYSTEM_USER,
        ///		ModifiedDate datetime NOT NULL DEFAULT getdate(),
        ///		ModifyType [varchar](50) NOT NULL,
        ///		RowsAffected [int] NOT NULL,
        ///		WorkStation [varchar](128) NOT NULL DEFAULT HOST_NAME(),
        ///		Application [var [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditTrxMasterDS {
            get {
                return ResourceManager.GetString("AuditTrxMasterDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT * FROM sys.triggers WHERE object_id = OBJECT_ID(N&apos;[&lt;&lt;schema&gt;&gt;].[&lt;&lt;Trigger Name&gt;&gt;]&apos;))
        ///BEGIN
        ///
        ///	EXEC dbo.sp_executesql @statement = N&apos;ALTER TRIGGER [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Trigger Name&gt;&gt;] ON [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Table Name&gt;&gt;] FOR UPDATE
        ///	AS
        ///	BEGIN
        ///		DECLARE @count int
        ///		SELECT @count = count(*) FROM deleted
        ///	
        ///		-- Insert the values of the deleted row into the audit table
        ///		INSERT INTO [&lt;&lt;schema&gt;&gt;].[&lt;&lt;Audit Table Name&gt;&gt;] ([ModifyType],[RowsAffected],&lt;&lt;Column List&gt;&gt;) 
        ///			SELECT &apos;&apos;UPDATED&apos;&apos;,@count [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditUpdateTrigger {
            get {
                return ResourceManager.GetString("AuditUpdateTrigger", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT name FROM sys.objects WHERE name = &apos;&lt;&lt;Trigger Name&gt;&gt;&apos; AND type = &apos;TR&apos;)
        ///	DROP TRIGGER &lt;&lt;Trigger Name&gt;&gt;
        ///	Print &apos;&lt;&lt;Trigger Name&gt;&gt; :: Dropped&apos;
        ///GO
        ///
        ///CREATE TRIGGER &lt;&lt;Trigger Name&gt;&gt; ON &lt;&lt;Table Name&gt;&gt; FOR UPDATE
        ///AS
        ///BEGIN
        ///	DECLARE @TrxId uniqueidentifier
        ///	SET @TrxId = newid()
        ///	
        ///	DECLARE @count int
        ///	SELECT @count = count(*) FROM inserted
        ///	
        ///	DECLARE @InsertedBy int, @IndividualID int, @ObjectType int
        ///	SELECT @InsertedBy = &lt;&lt;InsertByColumn&gt;&gt;,  @IndividualID = &lt;&lt;IndividualIDColumn&gt;&gt;, @Ob [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string AuditUpdateTriggerDS {
            get {
                return ResourceManager.GetString("AuditUpdateTriggerDS", resourceCulture);
            }
        }
    }
}
